[{"path":"https://jbaafi.github.io/climecol/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 climecol authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jbaafi.github.io/climecol/articles/getting-started.html","id":"why-climecol","dir":"Articles","previous_headings":"","what":"Why climecol?","title":"Getting started with climecol","text":"climecol helps archive, explore, use climate/weather data ecological infectious-disease models: Ships example daily weather data (Newfoundland) can prototype fast. Provides photoperiod (daylength) functions (dependencies) seasonal drivers. Includes simple plotting/helpers quick QA communication. Designed reproducible workflows (works offline, CI-friendly).","code":""},{"path":"https://jbaafi.github.io/climecol/articles/getting-started.html","id":"installation","dir":"Articles","previous_headings":"Why climecol?","what":"Installation","title":"Getting started with climecol","text":"Load package:","code":"# install.packages(\"devtools\") devtools::install_github(\"jbaafi/climecol\") library(climecol)"},{"path":"https://jbaafi.github.io/climecol/articles/getting-started.html","id":"loading-data","dir":"Articles","previous_headings":"Why climecol?","what":"Loading Data","title":"Getting started with climecol","text":"","code":"wx <- read_weather_csv(\"data-raw/combined_data.csv\") wx <- normalize_weather_names(wx) qa <- validate_weather(wx, temp_bounds = c(-50, 50), rain_max = 150, snow_max = 60) qa$summary"},{"path":"https://jbaafi.github.io/climecol/articles/getting-started.html","id":"photoperiod-daylength","dir":"Articles","previous_headings":"Why climecol?","what":"Photoperiod (daylength)","title":"Getting started with climecol","text":"photoperiod helpers implement standard solar-geometry approximation (Forsythe et al., 1995) return hours daylight date latitude (timezone/longitude required). Daily photoperiod site Quick plot:  Monthly means multi-site comparison Keys matched case-insensitively; punctuation/spacing ignored.\"St John's\", \"st_johns\", \"St.Johns\" → st_johns (NL); \"Saint John\" / \"st john\" → saint_john (NB). pass lat without location, results labeled lat_<value>.","code":"pp_nl <- photoperiod_year(2024, location = \"St John's\") head(pp_nl) #>         date daylength_hours   lat location #> 1 2024-01-01        8.517220 47.56 st_johns #> 2 2024-01-02        8.532937 47.56 st_johns #> 3 2024-01-03        8.549903 47.56 st_johns #> 4 2024-01-04        8.568104 47.56 st_johns #> 5 2024-01-05        8.587527 47.56 st_johns #> 6 2024-01-06        8.608155 47.56 st_johns plot(pp_nl$date, pp_nl$daylength_hours, type = \"l\",      xlab = \"date\", ylab = \"Daylength (hours)\",      main = \"Photoperiod — St. John's, NL (2024)\") pp_nl_m <- photoperiod_year(2024, location = \"St John's\",  aggregate = \"month\") pp_nb_m <- photoperiod_year(2024, location = \"Saint John\", aggregate = \"month\") head(pp_nl_m); head(pp_nb_m) #>         date daylength_hours   lat location #> 1 2024-01-01         8.91655 47.56 st_johns #> 2 2024-02-01        10.20720 47.56 st_johns #> 3 2024-03-01        11.88795 47.56 st_johns #> 4 2024-04-01        13.65218 47.56 st_johns #> 5 2024-05-01        15.16109 47.56 st_johns #> 6 2024-06-01        15.91251 47.56 st_johns #>         date daylength_hours   lat   location #> 1 2024-01-01        9.172983 45.27 saint_john #> 2 2024-02-01       10.354056 45.27 saint_john #> 3 2024-03-01       11.902529 45.27 saint_john #> 4 2024-04-01       13.528932 45.27 saint_john #> 5 2024-05-01       14.910968 45.27 saint_john #> 6 2024-06-01       15.593079 45.27 saint_john"},{"path":"https://jbaafi.github.io/climecol/articles/getting-started.html","id":"built-in-weather-data-temperature-rainfall","dir":"Articles","previous_headings":"Why climecol?","what":"Built-in weather data (temperature & rainfall)","title":"Getting started with climecol","text":"climecol ships Newfoundland daily weather dataset examples testing. Columns types Columns df example values","code":"library(dplyr)  # Start from the shipped dataset df <- weather_nl  # Normalize names to the climecol API df <- normalize_weather_names(df)  glimpse(df) #> Rows: 5,844 #> Columns: 13 #> $ date         <date> 2008-01-01, 2008-01-02, 2008-01-03, 2008-01-04, 2008-01-… #> $ Year         <int> 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 200… #> $ Month        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ Day          <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17… #> $ tmin_c       <dbl> -6.6, -8.1, -11.0, -12.6, -9.6, -10.5, -4.2, -1.2, -2.5, … #> $ tmax_c       <dbl> 1.6, 2.0, -0.4, -5.9, -2.4, -2.5, 2.5, 3.8, 0.5, 9.5, 0.5… #> $ tavg_c       <dbl> -2.5, -3.1, -5.7, -9.3, -6.0, -6.5, -0.9, 1.3, -1.0, 4.8,… #> $ rain_mm      <dbl> 0.2, 0.0, 0.2, 0.0, 0.0, 0.0, 0.0, 0.6, 0.8, 8.2, 0.0, 11… #> $ precip_mm    <dbl> 2.0, 4.5, 0.2, 0.0, 1.6, 2.2, 0.0, 0.6, 1.8, 8.2, 0.0, 11… #> $ snow_cm      <dbl> 1.8, 5.0, 0.0, 0.0, 2.6, 6.4, 0.0, 0.0, 1.8, 0.0, 0.0, 0.… #> $ Station.Name <chr> \"ST JOHN'S A\", \"ST JOHN'S A\", \"ST JOHN'S A\", \"ST JOHN'S A… #> $ Climate.ID   <dbl> 8403506, 8403506, 8403506, 8403506, 8403506, 8403506, 840… #> $ station      <chr> \"ST JOHN'S A\", \"ST JOHN'S A\", \"ST JOHN'S A\", \"ST JOHN'S A… cols <- data.frame(   column = names(df),   class  = vapply(df, function(x) paste(class(x), collapse=\"/\"), character(1)),   example = vapply(df, function(x) {     i <- which(!is.na(x))[1]; if (length(i) == 0L) NA_character_ else as.character(x[i])   }, character(1)),   row.names = NULL ) knitr::kable(cols, caption = \"Columns in `df` with example values\")"},{"path":"https://jbaafi.github.io/climecol/articles/getting-started.html","id":"quick-rainfall-exploration","dir":"Articles","previous_headings":"Why climecol?","what":"Quick rainfall exploration","title":"Getting started with climecol","text":"Use package helper (works box):  compute monthly rainfall (robust different column names):","code":"plot_rainfall(df) # try to detect date and rainfall columns date_col <- names(df)[grepl(\"date\",  names(df), ignore.case=TRUE)][1] rain_col <- names(df)[grepl(\"rain|precip\", names(df), ignore.case=TRUE)][1]  if (!is.na(date_col) && !is.na(rain_col)) {   dat <- df   dat$..date <- as.Date(dat[[date_col]])   dat$..rain <- as.numeric(dat[[rain_col]])   dat$ym <- format(dat$..date, \"%Y-%m\")          # <-- make a real column    mon <- aggregate(..rain ~ ym, dat, sum, na.rm = TRUE)   names(mon) <- c(\"year_month\", \"rain_mm\")   head(mon)    plot(as.Date(paste0(mon$year_month, \"-01\")), mon$rain_mm, type=\"h\", lwd=4,        xlab = \"Month\", ylab = \"Total rainfall (mm)\",        main = \"Monthly rainfall totals\") } else {   message(\"Could not auto-detect date/rain columns.\") }"},{"path":"https://jbaafi.github.io/climecol/articles/getting-started.html","id":"temperature-overview-if-columns-exist","dir":"Articles","previous_headings":"Why climecol?","what":"Temperature overview (if columns exist)","title":"Getting started with climecol","text":"Export photoperiod modeling file written temporary folder vignette build. Replace tempdir() project path real workflows. Reference Forsythe, W. C., Rykiel, E. J., Stahl, R. S., Wu, H., & Schoolfield, R. M. (1995).model comparison daylength function latitude day year. Ecological Modelling, 80, 87–95.","code":"# Attempt to detect temperature columns nms <- names(df) tmax <- nms[grepl(\"tmax|temp_max|max\", nms, ignore.case=TRUE)][1] tmin <- nms[grepl(\"tmin|temp_min|min\", nms, ignore.case=TRUE)][1] tmean <- nms[grepl(\"tmean|temp_mean|mean\", nms, ignore.case=TRUE)][1] date_col <- nms[grepl(\"date\", nms, ignore.case=TRUE)][1]  if (!is.na(date_col) && (!is.na(tmean) || (!is.na(tmax) && !is.na(tmin)))) {   dat <- df   dat$..date <- as.Date(dat[[date_col]])   if (is.na(tmean)) {     dat$..tmean <- rowMeans(cbind(as.numeric(dat[[tmax]]), as.numeric(dat[[tmin]])), na.rm = TRUE)   } else {     dat$..tmean <- as.numeric(dat[[tmean]])   }   dat$ym <- format(dat$..date, \"%Y-%m\")         # <-- real column    monT <- aggregate(..tmean ~ ym, dat, mean, na.rm = TRUE)   names(monT) <- c(\"year_month\", \"tmean_C\")   head(monT)    plot(as.Date(paste0(monT$year_month, \"-01\")), monT$tmean_C, type=\"l\", lwd=2,        xlab = \"Month\", ylab = \"Mean temperature (°C)\",        main = \"Monthly mean temperature\") } else {   message(\"Could not auto-detect temperature columns.\") } out_file <- file.path(tempdir(), \"photoperiod_st_johns_2024.csv\") write.csv(pp_nl, out_file, row.names = FALSE) out_file #> [1] \"/tmp/Rtmpe55P0w/photoperiod_st_johns_2024.csv\""},{"path":"https://jbaafi.github.io/climecol/articles/getting-started.html","id":"seasonal-climatology-sinusoidal-fits","dir":"Articles","previous_headings":"Why climecol?","what":"Seasonal climatology: sinusoidal fits","title":"Getting started with climecol","text":"Model comparison AIC R²","code":"library(climecol)  data(weather_nl) fit_out <- fit_seasonal_temp(weather_nl, funcs = c(\"sin1\",\"sin2\"), plot = TRUE)  knitr::kable(fit_out$metrics, digits = 3, caption = \"Model comparison by AIC and R²\") if (!is.null(fit_out$plot)) fit_out$plot"},{"path":"https://jbaafi.github.io/climecol/articles/getting-started.html","id":"extending-seasonal-temperature-fitting-with-custom-models","dir":"Articles","previous_headings":"","what":"Extending seasonal temperature fitting with custom models","title":"Getting started with climecol","text":"function fit_seasonal_temp() supports user-defined formulas. useful want test functional forms beyond built-sinusoidal models. example, suppose define custom function:","code":"#Standardize column names  df <- normalize_weather_names(weather_nl)  # Define your custom model (formula uses mean_temp ~ ... and day_of_year) custom_models <- list(   quad = list(     formula = mean_temp ~ a + b * day_of_year + c * I(day_of_year^2),     start   = list(a = mean(df$tavg_c, na.rm = TRUE), b = 0, c = 0)  # <- REQUIRED   ) )  # Fit: built-ins via `funcs=`, user models via `custom=` res <- fit_seasonal_temp(   df,   funcs  = \"sin1\",     # optional: keep a built-in for comparison   custom = custom_models,   plot   = TRUE )  # 5) Results res$metrics   # AIC and R2 per model #> # A tibble: 2 × 3 #>   model   AIC    R2 #>   <chr> <dbl> <dbl> #> 1 sin1  1204. 0.971 #> 2 quad  1984. 0.758 res$plot      # overlay plot"},{"path":"https://jbaafi.github.io/climecol/articles/getting-started.html","id":"seasonal-photoperiod-fitting","dir":"Articles","previous_headings":"Extending seasonal temperature fitting with custom models","what":"Seasonal photoperiod fitting","title":"Getting started with climecol","text":"can estimate smooth periodic curve photoperiod (hours daylight) averaging day--year across multiple years, fitting simple sinusoidal functions using nonlinear least squares.  Custom models also supported passing named list formula start: Session info","code":"res <- fit_seasonal_photo(   location = \"St John's\",   years = c(2023, 2024),   funcs = c(\"sin1\",\"sin2\"),   plot = TRUE ) res$metrics #> # A tibble: 2 × 3 #>   model   AIC    R2 #>   <chr> <dbl> <dbl> #> 1 sin1  -934. 0.999 #> 2 sin2  -943. 0.999 res$plot res_custom <- fit_seasonal_photo(   location = \"St John's\",   years = c(2023, 2024),   funcs = \"sin1\",   custom = list(     cos1 = list(       formula = avg_photo ~ a + b * cos(2*pi*day_of_year/365),       start   = list(a = 12, b = 6)     )   ) ) res_custom$metrics #> # A tibble: 2 × 3 #>   model   AIC    R2 #>   <chr> <dbl> <dbl> #> 1 sin1  -934. 0.999 #> 2 cos1   495. 0.967 sessionInfo()"},{"path":"https://jbaafi.github.io/climecol/articles/import-and-qa-weather.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Import and QA weather data","text":"vignette shows two ways get clean, validated weather table: Load dataset shipped package Example: weather_nl Import raw CSV validate Import read_weather_csv() (e.g., Environment Canada daily export) Run quality checks validate_weather()","code":""},{"path":"https://jbaafi.github.io/climecol/articles/import-and-qa-weather.html","id":"standardized-schema","dir":"Articles","previous_headings":"Overview","what":"Standardized Schema","title":"Import and QA weather data","text":"standardized schema produced read_weather_csv() includes: date station climate_id lon, lat tmax_c, tmin_c, tavg_c rain_mm, snow_cm, precip_mm snow_on_ground_cm wind_spd_kmh, wind_dir_deg Using bundled dataset Import raw CSV disk Validate summarize Work standardized table data pass QA, downstream functions can assume consistent columns: Save standardized dataset package (optional)","code":"# Data shipped with the package: #data(\"weather_nl\") # head(weather_nl) # Example: read an Environment Canada (EC) style CSV (uses default mapping) # wx <- read_weather_csv(\"/Users/jbaafi/Desktop/data.csv\")  # For non-EC columns, provide a mapping: # my_map <- c(\"date\"=\"date\",\"station\"=\"station\",\"tmax\"=\"tmax_c\",\"tmin\"=\"tmin_c\",\"prcp\"=\"rain_mm\") # wx <- read_weather_csv(\"path/to/other_source.csv\", mapping = my_map) # Default thresholds (temp -60..60 °C, rain_max 200 mm) # qa <- validate_weather(wx)  # Tighter thresholds for coastal NL (example): # qa <- validate_weather(wx, temp_bounds = c(-50, 50), rain_max = 150, snow_max = 60)  # Turn off precip consistency if your source doesn’t guarantee identities: # qa <- validate_weather(wx, check_precip_consistency = FALSE)  # Inspect: # qa$summary # head(qa$flags) # Monthly rainfall summary (example - adapt to your functions) # monthly <- wx |> #   mutate(year = lubridate::year(date), month = lubridate::month(date)) |> #   group_by(station, year, month) |> #   summarise(rain_mm = sum(rain_mm, na.rm = TRUE), .groups = \"drop\") # head(monthly) # Persist a clean example for docs/tests # usethis::use_data(wx, name = \"weather_std_example\", overwrite = TRUE)"},{"path":"https://jbaafi.github.io/climecol/articles/import-and-qa-weather.html","id":"gaps-and-imputation","dir":"Articles","previous_headings":"Overview","what":"Gaps and Imputation","title":"Import and QA weather data","text":"Real-world weather data almost always contain gaps due missing observations, instrument downtime, quality filtering. climate- ecology-driven models, consistent daily time series essential. package provides three lightweight helpers support workflow: can also load data different source code format Expands date range station cover full period record. Missing rows inserted absent days, flagged is_missing_row = TRUE. creates consistent daily skeleton downstream functions can rely . summarise_gaps() Quantifies coverage per station (station-month). Reports number days, number missing, proportion covered, count gaps, longest gap length. Useful quickly diagnosing records complete problematic. impute_weather() Provides simple methods fill missing values. Options include: \"locf\": last observation carried forward \"linear\": straight-line interpolation \"spline\": smooth spline interpolation method makes different assumptions documented clearly used. Example workflow want load data, workflow becomes","code":"# Use the package dataset so the vignette always builds reproducibly library(climecol) library(dplyr)  data(weather_nl)  # Normalize column names df <- normalize_weather_names(weather_nl)  # Peek at columns (should include: date, station, tmin_c, tmax_c, tavg_c, rain_mm, precip_mm, snow_cm) dplyr::glimpse(df) #> Rows: 5,844 #> Columns: 13 #> $ date         <date> 2008-01-01, 2008-01-02, 2008-01-03, 2008-01-04, 2008-01-… #> $ Year         <int> 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 200… #> $ Month        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ Day          <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17… #> $ tmin_c       <dbl> -6.6, -8.1, -11.0, -12.6, -9.6, -10.5, -4.2, -1.2, -2.5, … #> $ tmax_c       <dbl> 1.6, 2.0, -0.4, -5.9, -2.4, -2.5, 2.5, 3.8, 0.5, 9.5, 0.5… #> $ tavg_c       <dbl> -2.5, -3.1, -5.7, -9.3, -6.0, -6.5, -0.9, 1.3, -1.0, 4.8,… #> $ rain_mm      <dbl> 0.2, 0.0, 0.2, 0.0, 0.0, 0.0, 0.0, 0.6, 0.8, 8.2, 0.0, 11… #> $ precip_mm    <dbl> 2.0, 4.5, 0.2, 0.0, 1.6, 2.2, 0.0, 0.6, 1.8, 8.2, 0.0, 11… #> $ snow_cm      <dbl> 1.8, 5.0, 0.0, 0.0, 2.6, 6.4, 0.0, 0.0, 1.8, 0.0, 0.0, 0.… #> $ Station.Name <chr> \"ST JOHN'S A\", \"ST JOHN'S A\", \"ST JOHN'S A\", \"ST JOHN'S A… #> $ Climate.ID   <dbl> 8403506, 8403506, 8403506, 8403506, 8403506, 8403506, 840… #> $ station      <chr> \"ST JOHN'S A\", \"ST JOHN'S A\", \"ST JOHN'S A\", \"ST JOHN'S A… # Example only — not run during vignette build: # wx <- read_weather_csv(\"data-raw/combined_data.csv\") # wx <- read_weather_csv(\"~/Desktop/combined_data.csv\") df_cal <- complete_daily_calendar(df) head(df_cal, 10) #> # A tibble: 10 × 14 #>    station   date        Year Month   Day tmin_c tmax_c tavg_c rain_mm precip_mm #>    <chr>     <date>     <int> <int> <int>  <dbl>  <dbl>  <dbl>   <dbl>     <dbl> #>  1 ST JOHN'… 2008-01-01  2008     1     1   -6.6    1.6   -2.5     0.2       2   #>  2 ST JOHN'… 2008-01-02  2008     1     2   -8.1    2     -3.1     0         4.5 #>  3 ST JOHN'… 2008-01-03  2008     1     3  -11     -0.4   -5.7     0.2       0.2 #>  4 ST JOHN'… 2008-01-04  2008     1     4  -12.6   -5.9   -9.3     0         0   #>  5 ST JOHN'… 2008-01-05  2008     1     5   -9.6   -2.4   -6       0         1.6 #>  6 ST JOHN'… 2008-01-06  2008     1     6  -10.5   -2.5   -6.5     0         2.2 #>  7 ST JOHN'… 2008-01-07  2008     1     7   -4.2    2.5   -0.9     0         0   #>  8 ST JOHN'… 2008-01-08  2008     1     8   -1.2    3.8    1.3     0.6       0.6 #>  9 ST JOHN'… 2008-01-09  2008     1     9   -2.5    0.5   -1       0.8       1.8 #> 10 ST JOHN'… 2008-01-10  2008     1    10    0      9.5    4.8     8.2       8.2 #> # ℹ 4 more variables: snow_cm <dbl>, Station.Name <chr>, Climate.ID <dbl>, #> #   is_missing_row <lgl> gap_by_station <- summarise_gaps(df_cal, by = \"station\") gap_by_month   <- summarise_gaps(df_cal, by = \"month\")  # Show quick summaries gap_by_station #> # A tibble: 2 × 6 #>   station           n_days n_missing coverage n_gaps longest_gap #>   <chr>              <int>     <int>    <dbl>  <int>       <int> #> 1 ST JOHN'S A         1827         0        1      0           0 #> 2 ST. JOHN'S INTL A   4017         0        1      0           0 head(gap_by_month, 6) #> # A tibble: 6 × 7 #>   station     month   n_days n_missing coverage n_gaps longest_gap #>   <chr>       <chr>    <int>     <int>    <dbl>  <int>       <int> #> 1 ST JOHN'S A 2008-01     31         0        1      0           0 #> 2 ST JOHN'S A 2008-02     29         0        1      0           0 #> 3 ST JOHN'S A 2008-03     31         0        1      0           0 #> 4 ST JOHN'S A 2008-04     30         0        1      0           0 #> 5 ST JOHN'S A 2008-05     31         0        1      0           0 #> 6 ST JOHN'S A 2008-06     30         0        1      0           0 df_imp <- impute_weather(   df_cal,   method = \"linear\",   cols   = c(\"tmax_c\",\"tmin_c\",\"tavg_c\"),   max_gap = 7 )  # Inspect results head(df_cal, 8) #> # A tibble: 8 × 14 #>   station    date        Year Month   Day tmin_c tmax_c tavg_c rain_mm precip_mm #>   <chr>      <date>     <int> <int> <int>  <dbl>  <dbl>  <dbl>   <dbl>     <dbl> #> 1 ST JOHN'S… 2008-01-01  2008     1     1   -6.6    1.6   -2.5     0.2       2   #> 2 ST JOHN'S… 2008-01-02  2008     1     2   -8.1    2     -3.1     0         4.5 #> 3 ST JOHN'S… 2008-01-03  2008     1     3  -11     -0.4   -5.7     0.2       0.2 #> 4 ST JOHN'S… 2008-01-04  2008     1     4  -12.6   -5.9   -9.3     0         0   #> 5 ST JOHN'S… 2008-01-05  2008     1     5   -9.6   -2.4   -6       0         1.6 #> 6 ST JOHN'S… 2008-01-06  2008     1     6  -10.5   -2.5   -6.5     0         2.2 #> 7 ST JOHN'S… 2008-01-07  2008     1     7   -4.2    2.5   -0.9     0         0   #> 8 ST JOHN'S… 2008-01-08  2008     1     8   -1.2    3.8    1.3     0.6       0.6 #> # ℹ 4 more variables: snow_cm <dbl>, Station.Name <chr>, Climate.ID <dbl>, #> #   is_missing_row <lgl> head(df_imp, 8) #> # A tibble: 8 × 14 #>   station    date        Year Month   Day tmin_c tmax_c tavg_c rain_mm precip_mm #>   <chr>      <date>     <int> <int> <int>  <dbl>  <dbl>  <dbl>   <dbl>     <dbl> #> 1 ST JOHN'S… 2008-01-01  2008     1     1   -6.6    1.6   -2.5     0.2       2   #> 2 ST JOHN'S… 2008-01-02  2008     1     2   -8.1    2     -3.1     0         4.5 #> 3 ST JOHN'S… 2008-01-03  2008     1     3  -11     -0.4   -5.7     0.2       0.2 #> 4 ST JOHN'S… 2008-01-04  2008     1     4  -12.6   -5.9   -9.3     0         0   #> 5 ST JOHN'S… 2008-01-05  2008     1     5   -9.6   -2.4   -6       0         1.6 #> 6 ST JOHN'S… 2008-01-06  2008     1     6  -10.5   -2.5   -6.5     0         2.2 #> 7 ST JOHN'S… 2008-01-07  2008     1     7   -4.2    2.5   -0.9     0         0   #> 8 ST JOHN'S… 2008-01-08  2008     1     8   -1.2    3.8    1.3     0.6       0.6 #> # ℹ 4 more variables: snow_cm <dbl>, Station.Name <chr>, Climate.ID <dbl>, #> #   is_missing_row <lgl> library(climecol)  # 1. Ensure calendar completeness df_cal <- complete_daily_calendar(df)  # 2. Summarise gaps by station gap_summary <- summarise_gaps(df_cal) print(gap_summary) #> # A tibble: 2 × 6 #>   station           n_days n_missing coverage n_gaps longest_gap #>   <chr>              <int>     <int>    <dbl>  <int>       <int> #> 1 ST JOHN'S A         1827         0        1      0           0 #> 2 ST. JOHN'S INTL A   4017         0        1      0           0  # 3. Fill missing values with linear interpolation df_imp <- impute_weather(df_cal, method = \"linear\")  # Now df_imp can be used safely in climate-driven models # Typical workflow: # wx        <- read_weather_csv(\"path/to/raw.csv\") # wx_cal    <- complete_daily_calendar(wx) # gaps      <- summarise_gaps(wx_cal, by = \"station\") # wx_imp    <- impute_weather(wx_cal, method = \"linear\", cols = c(\"tmax_c\",\"tmin_c\",\"tavg_c\"), max_gap = 7) # qa_after  <- validate_weather(wx_imp) # qa_after$summary"},{"path":"https://jbaafi.github.io/climecol/articles/import-and-qa-weather.html","id":"notes-and-caveats","dir":"Articles","previous_headings":"Overview > Gaps and Imputation","what":"Notes and Caveats","title":"Import and QA weather data","text":"functions designed climatological homogenization; provide practical utilities simulation-ready daily data. Gap imputation introduces uncertainty; users document choices , possible, conduct sensitivity analyses. critical applications (e.g., climate trend estimation), consider specialized homogenization tools outside package.","code":""},{"path":"https://jbaafi.github.io/climecol/articles/seasonal-climate-fits.html","id":"temperature-shift-scenarios","dir":"Articles","previous_headings":"","what":"Temperature shift scenarios","title":"seasonal-climate-fits","text":"often need “warming” scenarios like +1 +5 °C top baseline seasonal cycle.simulate_temp_shifts() uses best model fit_seasonal_temp() default adds fixed deltas fitted daily mean curve.","code":"data(weather_nl) fit <- fit_seasonal_temp(weather_nl, funcs = c(\"sin1\",\"sin2\"))  # Scenarios over day-of-year sims <- simulate_temp_shifts(fit, deltas = 0:5)  # long format library(ggplot2) ggplot(sims, aes(day_of_year, temp_c, color = key)) +   geom_line(linewidth = 0.9) +   labs(x = \"Day of year\", y = \"Mean temperature (°C)\", color = \"Scenario\") +   theme_minimal() # Scenarios for a specific calendar year days <- seq(as.Date(\"2024-01-01\"), as.Date(\"2024-12-31\"), by = \"day\") sims_2024 <- simulate_temp_shifts(fit, deltas = c(0,2,5), dates = days) head(sims_2024) #> # A tibble: 6 × 3 #>   date       key      temp_c #>   <date>     <fct>     <dbl> #> 1 2024-01-01 baseline -1.16  #> 2 2024-01-01 Temp+0C  -1.16  #> 3 2024-01-01 Temp+2C   0.841 #> 4 2024-01-01 Temp+5C   3.84  #> 5 2024-01-02 baseline -1.29  #> 6 2024-01-02 Temp+0C  -1.29"},{"path":"https://jbaafi.github.io/climecol/articles/stochastic_rainfall.html","id":"purpose","dir":"Articles","previous_headings":"","what":"Purpose","title":"Stochastic Rainfall","text":"many ecological climate-driven models, rainfall highly variable input exhibits strong monthly seasonality weak daily autocorrelation. preserve seasonality introducing stochastic variability, function sample_rainfall_by_month() resamples daily rainfall values calendar month across multiple observed years. approach maintains month’s empirical rainfall distribution — including fraction dry days — generates realistic synthetic daily rainfall series use simulation models. Example Visualization  Notes Preserves seasonality: sampling pools month-specific. Dry-day frequency: automatically preserved via empirical distributions. Reproducibility: use seed consistent output. Flexible input: accepts Date numeric day offsets (origin). Supports arbitrary column names: tries standardize via normalize_weather_names(). Reproducibility check workflow provides lightweight, nonparametric way propagate hydroclimatic variability climate population dynamics models.","code":"data(weather_nl)  # Define the simulation period dates <- seq.Date(as.Date(\"2014-09-01\"), by = \"day\", length.out = 30)  # Sample stochastic rainfall from monthly distributions rain_sim <- sample_rainfall_by_month(dates, weather_nl)  # Combine with dates for inspection rain_df <- data.frame(date = dates, rain_sim_mm = rain_sim) head(rain_df, 10) #>          date rain_sim_mm #> 1  2014-09-01         9.8 #> 2  2014-09-02         0.4 #> 3  2014-09-03         0.0 #> 4  2014-09-04        23.6 #> 5  2014-09-05         0.0 #> 6  2014-09-06         0.6 #> 7  2014-09-07         3.4 #> 8  2014-09-08         0.4 #> 9  2014-09-09        21.2 #> 10 2014-09-10         0.0 ggplot(rain_df, aes(x = date, y = rain_sim_mm)) +   geom_col(fill = \"steelblue\", width = 0.8) +   labs(title = \"Stochastic daily rainfall sampled by month\",        x = \"Date\", y = \"Rainfall (mm)\") +   theme_minimal(base_size = 14) # Run twice with same seed — identical results sim1 <- sample_rainfall_by_month(dates, weather_nl, seed = 101) sim2 <- sample_rainfall_by_month(dates, weather_nl, seed = 101) identical(sim1, sim2) #> [1] TRUE"},{"path":"https://jbaafi.github.io/climecol/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joseph Baafi. Author, maintainer.","code":""},{"path":"https://jbaafi.github.io/climecol/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Baafi J (2025). climecol: Climate Weather Data Tools Ecological Modeling. R package version 0.1.6, https://github.com/jbaafi/climecol.","code":"@Manual{,   title = {climecol: Climate and Weather Data Tools for Ecological Modeling},   author = {Joseph Baafi},   year = {2025},   note = {R package version 0.1.6},   url = {https://github.com/jbaafi/climecol}, }"},{"path":[]},{"path":"https://jbaafi.github.io/climecol/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"climecol","text":"climecol provides tools archiving, cleaning, analyzing, visualizing weather climate data ecological infectious-disease modeling. ships curated daily weather data simple helpers quick plotting analysis.","code":""},{"path":"https://jbaafi.github.io/climecol/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"climecol","text":"can install development version climecol GitHub : (Alternatively: pak::pak(\"jbaafi/climecol\").)","code":"# install.packages(\"devtools\") devtools::install_github(\"jbaafi/climecol\")"},{"path":"https://jbaafi.github.io/climecol/index.html","id":"data-importation","dir":"","previous_headings":"","what":"Data Importation","title":"climecol","text":"","code":"library(climecol) wx <- read_weather_csv(\"/Users/jbaafi/Desktop/data.csv\") qa <- validate_weather(wx, temp_bounds = c(-50, 50), rain_max = 150, snow_max = 60) qa$summary"},{"path":"https://jbaafi.github.io/climecol/index.html","id":"gap-handling-and-imputation","dir":"","previous_headings":"","what":"Gap handling and imputation","title":"climecol","text":"package provides tools handle gaps weather records: complete_daily_calendar() ensures full daily date sequence per station, making gaps explicit. summarise_gaps() quantifies missingness, coverage, longest contiguous gaps. impute_weather() offers lightweight fillers (last observation carried forward, linear, spline). Together, helpers make easy prepare consistent daily time series downstream climate-driven modeling.","code":""},{"path":"https://jbaafi.github.io/climecol/index.html","id":"photoperiod-daylength","dir":"","previous_headings":"","what":"Photoperiod (daylength)","title":"climecol","text":"package includes fast, dependency-free photoperiod helpers based standard solar-geometry approximation (Forsythe et al., 1995). return hours daylight date latitude —ideal smooth seasonal driver ecological models.","code":""},{"path":"https://jbaafi.github.io/climecol/index.html","id":"functions","dir":"","previous_headings":"Photoperiod (daylength)","what":"Functions","title":"climecol","text":"daylength_f95(date, lat) → numeric vector daylight hours photoperiod_year(year, lat = NULL, location = NULL, aggregate = c(\"none\",\"month\")) Supply either lat built-location key aggregate = \"month\" returns monthly means (12 rows) photoperiod_sites() → named vector built-locations latitudes(keys matched case-insensitively; punctuation/spacing ignored) Quick examples simple plot daylength year:","code":"library(climecol)  # Daily photoperiod for 2024 at St. John's (NL) via location pp_nl <- photoperiod_year(2024, location = \"St John's\") head(pp_nl) #>         date daylength_hours   lat location #> 1 2024-01-01        8.517220 47.56 st_johns #> 2 2024-01-02        8.532937 47.56 st_johns #> 3 2024-01-03        8.549903 47.56 st_johns #> 4 2024-01-04        8.568104 47.56 st_johns #> 5 2024-01-05        8.587527 47.56 st_johns #> 6 2024-01-06        8.608155 47.56 st_johns  # Monthly mean photoperiod at 47.56°N photoperiod_year(2024, lat = 47.56, aggregate = \"month\") #>          date daylength_hours   lat  location #> 1  2024-01-01        8.916550 47.56 lat_47.56 #> 2  2024-02-01       10.207203 47.56 lat_47.56 #> 3  2024-03-01       11.887952 47.56 lat_47.56 #> 4  2024-04-01       13.652182 47.56 lat_47.56 #> 5  2024-05-01       15.161088 47.56 lat_47.56 #> 6  2024-06-01       15.912512 47.56 lat_47.56 #> 7  2024-07-01       15.487501 47.56 lat_47.56 #> 8  2024-08-01       14.115072 47.56 lat_47.56 #> 9  2024-09-01       12.384641 47.56 lat_47.56 #> 10 2024-10-01       10.635663 47.56 lat_47.56 #> 11 2024-11-01        9.175674 47.56 lat_47.56 #> 12 2024-12-01        8.490440 47.56 lat_47.56  # Saint John (NB) vs St. John's (NL) — distinct cities photoperiod_year(2024, location = \"Saint John\", aggregate = \"month\") #>          date daylength_hours   lat   location #> 1  2024-01-01        9.172983 45.27 saint_john #> 2  2024-02-01       10.354056 45.27 saint_john #> 3  2024-03-01       11.902529 45.27 saint_john #> 4  2024-04-01       13.528932 45.27 saint_john #> 5  2024-05-01       14.910968 45.27 saint_john #> 6  2024-06-01       15.593079 45.27 saint_john #> 7  2024-07-01       15.207900 45.27 saint_john #> 8  2024-08-01       13.954218 45.27 saint_john #> 9  2024-09-01       12.360833 45.27 saint_john #> 10 2024-10-01       10.748119 45.27 saint_john #> 11 2024-11-01        9.409230 45.27 saint_john #> 12 2024-12-01        8.785616 45.27 saint_john photoperiod_year(2024, location = \"St John's\", aggregate = \"month\") #>          date daylength_hours   lat location #> 1  2024-01-01        8.916550 47.56 st_johns #> 2  2024-02-01       10.207203 47.56 st_johns #> 3  2024-03-01       11.887952 47.56 st_johns #> 4  2024-04-01       13.652182 47.56 st_johns #> 5  2024-05-01       15.161088 47.56 st_johns #> 6  2024-06-01       15.912512 47.56 st_johns #> 7  2024-07-01       15.487501 47.56 st_johns #> 8  2024-08-01       14.115072 47.56 st_johns #> 9  2024-09-01       12.384641 47.56 st_johns #> 10 2024-10-01       10.635663 47.56 st_johns #> 11 2024-11-01        9.175674 47.56 st_johns #> 12 2024-12-01        8.490440 47.56 st_johns  # List built-in sites photoperiod_sites() #>   st_johns saint_john     kumasi    nairobi  cape_town ain_mahbel  #>      47.56      45.27       6.69      -1.29     -33.92      34.24 plot(pp_nl$date, pp_nl$daylength_hours, type = \"l\",      xlab = \"Date\", ylab = \"Daylength (hours)\",      main = \"Photoperiod at St. John's, NL (2024)\")"},{"path":"https://jbaafi.github.io/climecol/index.html","id":"notes","dir":"","previous_headings":"Photoperiod (daylength)","what":"Notes","title":"climecol","text":"Inputs like \"St John's\", \"st_johns\", \"St.Johns\" resolve NL site (st_johns). \"Saint John\" / \"st john\" resolves NB (saint_john). pass lat (location), output labeled lat_<value>.","code":""},{"path":"https://jbaafi.github.io/climecol/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"climecol","text":"Load package explore included Newfoundland dataset (2008–2023):","code":"library(climecol)  # Load dataset data(weather_nl)  # Peek at structure dplyr::glimpse(weather_nl) #> Rows: 5,844 #> Columns: 13 #> $ date         <date> 2008-01-01, 2008-01-02, 2008-01-03, 2008-01-04, 2008-01-… #> $ Year         <int> 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 2008, 200… #> $ Month        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ Day          <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17… #> $ tmin_c       <dbl> -6.6, -8.1, -11.0, -12.6, -9.6, -10.5, -4.2, -1.2, -2.5, … #> $ tmax_c       <dbl> 1.6, 2.0, -0.4, -5.9, -2.4, -2.5, 2.5, 3.8, 0.5, 9.5, 0.5… #> $ tavg_c       <dbl> -2.5, -3.1, -5.7, -9.3, -6.0, -6.5, -0.9, 1.3, -1.0, 4.8,… #> $ rain_mm      <dbl> 0.2, 0.0, 0.2, 0.0, 0.0, 0.0, 0.0, 0.6, 0.8, 8.2, 0.0, 11… #> $ precip_mm    <dbl> 2.0, 4.5, 0.2, 0.0, 1.6, 2.2, 0.0, 0.6, 1.8, 8.2, 0.0, 11… #> $ snow_cm      <dbl> 1.8, 5.0, 0.0, 0.0, 2.6, 6.4, 0.0, 0.0, 1.8, 0.0, 0.0, 0.… #> $ Station.Name <chr> \"ST JOHN'S A\", \"ST JOHN'S A\", \"ST JOHN'S A\", \"ST JOHN'S A… #> $ Climate.ID   <dbl> 8403506, 8403506, 8403506, 8403506, 8403506, 8403506, 840… #> $ station      <chr> \"ST JOHN'S A\", \"ST JOHN'S A\", \"ST JOHN'S A\", \"ST JOHN'S A…"},{"path":"https://jbaafi.github.io/climecol/index.html","id":"photoperiod-fits-seasonal-curve","dir":"","previous_headings":"","what":"Photoperiod fits (seasonal curve)","title":"climecol","text":"","code":"# Option A: generate photoperiod from a location for two years and fit res <- fit_seasonal_photo(location = \"St John's\",                           years = c(2023, 2024),                           funcs = c(\"sin1\",\"sin2\"),                           plot = TRUE) res$metrics #> # A tibble: 2 × 3 #>   model   AIC    R2 #>   <chr> <dbl> <dbl> #> 1 sin1  -934. 0.999 #> 2 sin2  -943. 0.999 if (!is.null(res$plot)) print(res$plot) # Option B: provide your own photoperiod data frame # df <- data.frame(date = as.Date(\"2023-01-01\") + 0:729, #                  photoperiod_hours = 12 + 6*cos(2*pi*(1:730)/365)) # fit_seasonal_photo(df = df, funcs = \"sin1\", plot = TRUE)  # Custom model example res2 <- fit_seasonal_photo(   location = \"St John's\",   years = c(2023, 2024),   funcs = \"sin1\",   custom = list(     cos1 = list(       formula = avg_photo ~ a + b * cos(2*pi*day_of_year/365),       start   = list(a = 12, b = 6)     )   ) ) res2$metrics #> # A tibble: 2 × 3 #>   model   AIC    R2 #>   <chr> <dbl> <dbl> #> 1 sin1  -934. 0.999 #> 2 cos1   495. 0.967"},{"path":"https://jbaafi.github.io/climecol/index.html","id":"rainfall-data","dir":"","previous_headings":"","what":"Rainfall data","title":"climecol","text":"Plot daily rainfall:  figure generated knitting README.","code":"plot_rainfall(weather_nl)"},{"path":"https://jbaafi.github.io/climecol/index.html","id":"seasonal-temperature-fitting","dir":"","previous_headings":"Rainfall data","what":"Seasonal temperature fitting","title":"climecol","text":"","code":"data(weather_nl) res <- fit_seasonal_temp(weather_nl, funcs = c(\"sin1\",\"sin2\"), plot = TRUE) res$metrics #> # A tibble: 2 × 3 #>   model   AIC    R2 #>   <chr> <dbl> <dbl> #> 1 sin1  1204. 0.971 #> 2 sin2  1159. 0.975 #> # A tibble: 2 x 3 #>   model   AIC    R2 #>   <chr> <dbl> <dbl> #> 1 sin1   ...   ... #> 2 sin2   ...   ...  # plot overlay (observed vs fitted) res$plot"},{"path":"https://jbaafi.github.io/climecol/index.html","id":"custom-seasonal-temperature-models","dir":"","previous_headings":"","what":"Custom seasonal temperature models","title":"climecol","text":"addition built-sinusoidal models (sin1, cos1, etc.), can also pass formula fit_seasonal_temp() via funcs argument. example, suppose define custom function:","code":"#Standardize column names  df <- normalize_weather_names(weather_nl)  # Define your custom model (formula uses mean_temp ~ ... and day_of_year) custom_models <- list(   quad = list(     formula = mean_temp ~ a + b * day_of_year + c * I(day_of_year^2),     start   = list(a = mean(df$tavg_c, na.rm = TRUE), b = 0, c = 0)  # <- REQUIRED   ) )  # Fit: built-ins via `funcs=`, user models via `custom=` res <- fit_seasonal_temp(   df,   funcs  = \"sin1\",     # optional: keep a built-in for comparison   custom = custom_models,   plot   = TRUE )  # 5) Results res$metrics   # AIC and R2 per model #> # A tibble: 2 × 3 #>   model   AIC    R2 #>   <chr> <dbl> <dbl> #> 1 sin1  1204. 0.971 #> 2 quad  1984. 0.758 res$plot      # overlay plot"},{"path":"https://jbaafi.github.io/climecol/index.html","id":"stochastic-rainfall-sampling-by-month","dir":"","previous_headings":"","what":"Stochastic Rainfall Sampling by Month","title":"climecol","text":"function sample_rainfall_by_month() generates stochastic daily rainfall time series preserving monthly seasonality observed historical record. allows produce rainfall inputs simulation models retain realistic wet/dry season structure without imposing statistical distribution.  sampled values drawn -month historical rainfall distribution, wet dry months retain distinct variability patterns.","code":"library(climecol) data(weather_nl)  # Define target dates to simulate set.seed(123) dates <- seq.Date(as.Date(\"2012-01-01\"), as.Date(\"2012-01-15\"), by = \"day\")  # Sample synthetic daily rainfall using historical monthly pools rain_sim <- sample_rainfall_by_month(dates, weather_nl)  # Preview head(data.frame(date = dates, rain_sim_mm = rain_sim), 10) #>          date rain_sim_mm #> 1  2012-01-01         0.0 #> 2  2012-01-02         0.0 #> 3  2012-01-03         0.0 #> 4  2012-01-04         0.0 #> 5  2012-01-05         0.4 #> 6  2012-01-06         0.0 #> 7  2012-01-07         0.0 #> 8  2012-01-08         0.0 #> 9  2012-01-09         0.0 #> 10 2012-01-10         0.0 plot(dates, rain_sim, type = \"h\", lwd = 3,      xlab = \"Date\", ylab = \"Simulated rainfall (mm)\",      main = \"Daily rainfall sampled by month\")"},{"path":"https://jbaafi.github.io/climecol/index.html","id":"simulating-temperature-shift-scenarios-baseline--deltas","dir":"","previous_headings":"","what":"Simulating Temperature Shift Scenarios (baseline + deltas)","title":"climecol","text":"","code":"data(weather_nl) fit <- fit_seasonal_temp(weather_nl, funcs = c(\"sin1\",\"sin2\"))  # Over day-of-year (1..365) sims <- simulate_temp_shifts(fit, deltas = 0:5)   # long format head(sims) #> # A tibble: 6 × 3 #>   day_of_year key      temp_c #>         <dbl> <fct>     <dbl> #> 1           1 baseline -1.16  #> 2           1 Temp+0C  -1.16  #> 3           1 Temp+1C  -0.159 #> 4           1 Temp+2C   0.841 #> 5           1 Temp+3C   1.84  #> 6           1 Temp+4C   2.84  # Plot library(ggplot2) ggplot(sims, aes(x = day_of_year)) +   geom_line(aes(y = temp_c, color = key, linetype = key), linewidth = 0.9) +   labs(x = \"Day of year\", y = \"Mean temperature (°C)\", color = \"Scenario\", linetype = \"Scenario\") +   theme_minimal() # Map scenarios to an actual year (e.g., 2024) for modeling days <- seq(as.Date(\"2024-01-01\"), as.Date(\"2024-12-31\"), by = \"day\") sims_2024 <- simulate_temp_shifts(fit, deltas = c(0, 2, 5), dates = days)  head(sims_2024) #> # A tibble: 6 × 3 #>   date       key      temp_c #>   <date>     <fct>     <dbl> #> 1 2024-01-01 baseline -1.16  #> 2 2024-01-01 Temp+0C  -1.16  #> 3 2024-01-01 Temp+2C   0.841 #> 4 2024-01-01 Temp+5C   3.84  #> 5 2024-01-02 baseline -1.29  #> 6 2024-01-02 Temp+0C  -1.29"},{"path":"https://jbaafi.github.io/climecol/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"climecol","text":"Issues pull requests welcome via repo’s issue tracker.","code":""},{"path":"https://jbaafi.github.io/climecol/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"climecol","text":"’re interested discussing collaborations questions climecol, email jbaafi@mun.ca.","code":""},{"path":"https://jbaafi.github.io/climecol/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"climecol","text":"MIT © Joseph Baafi","code":""},{"path":"https://jbaafi.github.io/climecol/reference/complete_daily_calendar.html","id":null,"dir":"Reference","previous_headings":"","what":"Complete the daily calendar per station and mark gaps — complete_daily_calendar","title":"Complete the daily calendar per station and mark gaps — complete_daily_calendar","text":"Complete daily calendar per station mark gaps","code":""},{"path":"https://jbaafi.github.io/climecol/reference/complete_daily_calendar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Complete the daily calendar per station and mark gaps — complete_daily_calendar","text":"","code":"complete_daily_calendar(df, start = NULL, end = NULL, by = \"day\")"},{"path":"https://jbaafi.github.io/climecol/reference/complete_daily_calendar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Complete the daily calendar per station and mark gaps — complete_daily_calendar","text":"df Tibble least date station. start Optional Date scalar. NULL, uses per-station min date. end Optional Date scalar. NULL, uses per-station max date. Sequence step; \"day\" supported.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/complete_daily_calendar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Complete the daily calendar per station and mark gaps — complete_daily_calendar","text":"tibble full daily calendar per station logical column is_missing_row indicating rows absent input.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/daylength_f95.html","id":null,"dir":"Reference","previous_headings":"","what":"Daylength (photoperiod) in hours (Forsythe et al. 1995) — daylength_f95","title":"Daylength (photoperiod) in hours (Forsythe et al. 1995) — daylength_f95","text":"Fast, dependency-free daylight length given date latitude.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/daylength_f95.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Daylength (photoperiod) in hours (Forsythe et al. 1995) — daylength_f95","text":"","code":"daylength_f95(date, lat)"},{"path":"https://jbaafi.github.io/climecol/reference/daylength_f95.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Daylength (photoperiod) in hours (Forsythe et al. 1995) — daylength_f95","text":"date Date vector. lat Latitude decimal degrees (-90..90).","code":""},{"path":"https://jbaafi.github.io/climecol/reference/daylength_f95.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Daylength (photoperiod) in hours (Forsythe et al. 1995) — daylength_f95","text":"Numeric vector daylight length hours.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/daylength_f95.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Daylength (photoperiod) in hours (Forsythe et al. 1995) — daylength_f95","text":"Forsythe, W. C. et al. (1995) Ecol. Modelling 80: 1–13.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/default_weather_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Default column mapping for raw weather CSVs — default_weather_mapping","title":"Default column mapping for raw weather CSVs — default_weather_mapping","text":"starter mapping (names = raw headers; values = standardized names) based Environment Canada daily CSVs. Edit extend match data source. Standard target names can map : date, station, climate_id, lon, lat, tmax_c, tmin_c, tavg_c, rain_mm, snow_cm, precip_mm, snow_on_ground_cm, wind_spd_kmh, wind_dir_deg, wind_dir_deg10.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/default_weather_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default column mapping for raw weather CSVs — default_weather_mapping","text":"","code":"default_weather_mapping()"},{"path":"https://jbaafi.github.io/climecol/reference/default_weather_mapping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default column mapping for raw weather CSVs — default_weather_mapping","text":"named character vector use read_weather_csv(mapping = ...).","code":""},{"path":"https://jbaafi.github.io/climecol/reference/default_weather_mapping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default column mapping for raw weather CSVs — default_weather_mapping","text":"","code":"default_weather_mapping() #>                 Date.Time              Station.Name                Climate.ID  #>                    \"date\"                 \"station\"              \"climate_id\"  #>             Longitude..x.              Latitude..y.             Max.Temp...C.  #>                     \"lon\"                     \"lat\"                  \"tmax_c\"  #>             Min.Temp...C.            Mean.Temp...C.           Total.Rain..mm.  #>                  \"tmin_c\"                  \"tavg_c\"                 \"rain_mm\"  #>           Total.Snow..cm.         Total.Precip..mm.         Snow.on.Grnd..cm.  #>                 \"snow_cm\"               \"precip_mm\"       \"snow_on_ground_cm\"  #>    Spd.of.Max.Gust..km.h. Dir.of.Max.Gust..10s.deg.  #>            \"wind_spd_kmh\"          \"wind_dir_deg10\""},{"path":"https://jbaafi.github.io/climecol/reference/dot-photoperiod_sites.html","id":null,"dir":"Reference","previous_headings":"","what":"Built-in latitudes for convenience — .photoperiod_sites","title":"Built-in latitudes for convenience — .photoperiod_sites","text":"Small named vector users can supply location instead lat. Extend/modify like.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/dot-photoperiod_sites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Built-in latitudes for convenience — .photoperiod_sites","text":"","code":".photoperiod_sites"},{"path":"https://jbaafi.github.io/climecol/reference/dot-photoperiod_sites.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Built-in latitudes for convenience — .photoperiod_sites","text":"object class numeric length 6.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/fit_seasonal_photo.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit seasonal photoperiod curve — fit_seasonal_photo","title":"Fit seasonal photoperiod curve — fit_seasonal_photo","text":"Fits sinusoidal/periodic models mean daily photoperiod cycle (averaged across years). Supports built-ins (\"sin1\",\"sin2\") user-defined nls() models.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/fit_seasonal_photo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit seasonal photoperiod curve — fit_seasonal_photo","text":"","code":"fit_seasonal_photo(   df = NULL,   location = NULL,   lat = NULL,   years = NULL,   funcs = c(\"sin1\", \"sin2\"),   custom = NULL,   plot = FALSE )"},{"path":"https://jbaafi.github.io/climecol/reference/fit_seasonal_photo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit seasonal photoperiod curve — fit_seasonal_photo","text":"df Optional data frame columns date photoperiod_hours. omitted, must provide location lat years. location Optional character key understood photoperiod_year() (e.g. \"St John's\"). lat Optional numeric latitude decimal degrees (used location NULL). years Integer vector years generate average (default: last two completed years). funcs Character vector built-models fit. Options: \"sin1\": + b1 * sin(2pit/365) + b2 * cos(2pit/365) \"sin2\": T0 * (1 + T1 * cos(2pi(omega*t + theta)/365)) custom Named list user models. element: list(formula = <nls-formula>, start = <named list>). formula must use avg_photo (lhs) day_of_year (rhs) defined inside function. Example: custom = list(cos1 = list( formula = avg_photo ~ + b * cos(2*pi*day_of_year/365), start   = list(= 12, b = 6))) plot Logical; TRUE, include ggplot overlay observed vs. fitted.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/fit_seasonal_photo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit seasonal photoperiod curve — fit_seasonal_photo","text":"list : daily_avg tibble day_of_year, observed avg_photo, one column per fitted model (fitted_<name>). fits list nls fit objects (converged). metrics tibble model, AIC, R2. plot ggplot object (present plot = TRUE).","code":""},{"path":"https://jbaafi.github.io/climecol/reference/fit_seasonal_photo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit seasonal photoperiod curve — fit_seasonal_photo","text":"can supply data frame columns date photoperiod_hours, let function generate photoperiod using photoperiod_year() specifying location (preferred) lat years average . Data aggregated day--year means across years, model fit nls(). R^2 computed 1 - SS_res/SS_tot aggregated series.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/fit_seasonal_photo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit seasonal photoperiod curve — fit_seasonal_photo","text":"","code":"# Example 1: from shipped data (if you have photoperiod column) # df <- data.frame(date = as.Date('2020-01-01') + 0:729, #                  photoperiod_hours = 12 + 6*cos(2*pi*(1:730)/365) + rnorm(730,0,0.1)) # res <- fit_seasonal_photo(df = df, funcs = c(\"sin1\",\"sin2\"), plot = TRUE) # res$metrics  # Example 2: generate via location for two years and add a custom model # res2 <- fit_seasonal_photo( #   location = \"St John's\", #   years = c(2023, 2024), #   funcs = \"sin1\", #   custom = list( #     cos1 = list( #       formula = avg_photo ~ a + b * cos(2*pi*day_of_year/365), #       start   = list(a = 12, b = 6) #     ) #   ), #   plot = TRUE # ) # res2$metrics"},{"path":"https://jbaafi.github.io/climecol/reference/fit_seasonal_temp.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit seasonal temperature curve — fit_seasonal_temp","title":"Fit seasonal temperature curve — fit_seasonal_temp","text":"Fits sinusoidal/periodic models mean daily temperature cycle (averaged across years). Supports built-ins (\"sin1\",\"sin2\") arbitrary user-defined nls() models.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/fit_seasonal_temp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit seasonal temperature curve — fit_seasonal_temp","text":"","code":"fit_seasonal_temp(df, funcs = c(\"sin1\", \"sin2\"), custom = NULL, plot = FALSE)"},{"path":"https://jbaafi.github.io/climecol/reference/fit_seasonal_temp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit seasonal temperature curve — fit_seasonal_temp","text":"df Data frame column date either tavg_c tmin_c tmax_c. funcs Character vector built-models fit. Options: \"sin1\": \\(+ b_1 \\sin(2\\pi t / 365) + b_2 \\cos(2\\pi t / 365)\\) \"sin2\": \\(T_0 \\left(1 + T_1 \\cos(2\\pi(\\omega t + \\theta)/365)\\right)\\) custom Named list user models. element list : formula: nls formula using variables mean_temp (response) day_of_year (predictor) defined function. start: named list starting parameters nls(). Example: custom = list(cos1 = list( formula = mean_temp ~ + b * cos(2*pi*day_of_year/365), start   = list(= 0, b = 10))) plot Logical; TRUE, include ggplot overlay observed vs. fitted.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/fit_seasonal_temp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit seasonal temperature curve — fit_seasonal_temp","text":"list : daily_avg tibble day--year (day_of_year), observed mean_temp, one column per fitted model (fitted_<name>). fits list nls fit objects (ones converged). metrics tibble model, AIC, R2 per converged fit. plot ggplot object (present plot = TRUE).","code":""},{"path":"https://jbaafi.github.io/climecol/reference/fit_seasonal_temp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit seasonal temperature curve — fit_seasonal_temp","text":"Data aggregated day--year means across years, model fit nls(). R^2 computed 1 - SS_res/SS_tot aggregated series. User formulas must reference mean_temp (lhs) day_of_year (rhs).","code":""},{"path":"https://jbaafi.github.io/climecol/reference/fit_seasonal_temp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit seasonal temperature curve — fit_seasonal_temp","text":"","code":"data(weather_nl) # Built-ins res <- fit_seasonal_temp(weather_nl, funcs = c(\"sin1\",\"sin2\"), plot = TRUE) res$metrics #> # A tibble: 2 × 3 #>   model   AIC    R2 #>   <chr> <dbl> <dbl> #> 1 sin1  1204. 0.971 #> 2 sin2  1159. 0.975  # Add a user-defined cosine model res2 <- fit_seasonal_temp(   weather_nl,   funcs = \"sin1\",   custom = list(     cos1 = list(       formula = mean_temp ~ a + b * cos(2*pi*day_of_year/365),       start   = list(a = mean(weather_nl$tavg_c, na.rm = TRUE), b = 5)     )   ),   plot = TRUE ) res2$metrics #> # A tibble: 2 × 3 #>   model   AIC    R2 #>   <chr> <dbl> <dbl> #> 1 sin1  1204. 0.971 #> 2 cos1  2132. 0.636"},{"path":"https://jbaafi.github.io/climecol/reference/impute_weather.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute missing weather values by station — impute_weather","title":"Impute missing weather values by station — impute_weather","text":"Lightweight imputers common weather gaps. Operates per-station returns rows/columns imputed values selected columns. Defaults conservative (temperatures + wind speed ).","code":""},{"path":"https://jbaafi.github.io/climecol/reference/impute_weather.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute missing weather values by station — impute_weather","text":"","code":"impute_weather(   df,   method = c(\"locf\", \"linear\", \"spline\"),   cols = c(\"tmax_c\", \"tmin_c\", \"tavg_c\", \"wind_spd_kmh\"),   max_gap = Inf )"},{"path":"https://jbaafi.github.io/climecol/reference/impute_weather.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute missing weather values by station — impute_weather","text":"df Tibble least date station. method One \"locf\", \"linear\", \"spline\". \"locf\": last observation carried forward (backward pass). \"linear\": piecewise linear interpolation (via approx). \"spline\": cubic spline (stats::spline), smoothest; use care. cols Character vector columns impute. Default: c(\"tmax_c\",\"tmin_c\",\"tavg_c\",\"wind_spd_kmh\"). (Precip/snow often true zeros bursts; include explicitly desired.) max_gap Integer number days. interpolate runs NAs length <= max_gap; longer runs remain NA (applies \"linear\"/\"spline\"). Default Inf.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/impute_weather.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute missing weather values by station — impute_weather","text":"Tibble like df imputed values cols.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/normalize_weather_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize weather data column names — normalize_weather_names","title":"Normalize weather data column names — normalize_weather_names","text":"Ensures standardized column naming (lowercase + expected keys) use climecol functions validate_weather(), complete_daily_calendar(), summarise_gaps(), impute_weather().","code":""},{"path":"https://jbaafi.github.io/climecol/reference/normalize_weather_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize weather data column names — normalize_weather_names","text":"","code":"normalize_weather_names(df, station_preference = \"auto\")"},{"path":"https://jbaafi.github.io/climecol/reference/normalize_weather_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize weather data column names — normalize_weather_names","text":"df data frame tibble daily weather data. station_preference One \"auto\" (default), \"Station.Name\", \"Climate.ID\". Controls column becomes canonical station.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/normalize_weather_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize weather data column names — normalize_weather_names","text":"tibble standardized columns present: date, tmin_c, tmax_c, tavg_c, rain_mm, precip_mm, snow_cm, station key (created reasonable source exists).","code":""},{"path":"https://jbaafi.github.io/climecol/reference/photoperiod_sites.html","id":null,"dir":"Reference","previous_headings":"","what":"Built-in photoperiod sites — photoperiod_sites","title":"Built-in photoperiod sites — photoperiod_sites","text":"Convenience key → latitude mapping used photoperiod_year().","code":""},{"path":"https://jbaafi.github.io/climecol/reference/photoperiod_sites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Built-in photoperiod sites — photoperiod_sites","text":"","code":"photoperiod_sites()"},{"path":"https://jbaafi.github.io/climecol/reference/photoperiod_sites.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Built-in photoperiod sites — photoperiod_sites","text":"named numeric vector names site keys values latitudes (decimal degrees).","code":""},{"path":"https://jbaafi.github.io/climecol/reference/photoperiod_sites.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Built-in photoperiod sites — photoperiod_sites","text":"following keys provided: st_johns — 47.56 (St. John's, NL, Canada) saint_john — 45.27 (Saint John, NB, Canada) kumasi — 6.69 (Ghana) nairobi — -1.29 (Kenya) cape_town — -33.92 (South Africa) ain_mahbel — 34.24 (Algeria) Keys matched case-insensitively punctuation/spacing ignored internal normalizer. example, \"St John's\", \"st_johns\", \"St.Johns\" resolve st_johns; \"Saint John\" \"st john\" resolve saint_john.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/photoperiod_sites.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Built-in photoperiod sites — photoperiod_sites","text":"","code":"# list available keys photoperiod_sites() #>   st_johns saint_john     kumasi    nairobi  cape_town ain_mahbel  #>      47.56      45.27       6.69      -1.29     -33.92      34.24   # use with photoperiod_year() photoperiod_year(2024, location = \"St John's\") |> head() #>         date daylength_hours   lat location #> 1 2024-01-01        8.517220 47.56 st_johns #> 2 2024-01-02        8.532937 47.56 st_johns #> 3 2024-01-03        8.549903 47.56 st_johns #> 4 2024-01-04        8.568104 47.56 st_johns #> 5 2024-01-05        8.587527 47.56 st_johns #> 6 2024-01-06        8.608155 47.56 st_johns photoperiod_year(2024, location = \"Saint John\", aggregate = \"month\") #>          date daylength_hours   lat   location #> 1  2024-01-01        9.172983 45.27 saint_john #> 2  2024-02-01       10.354056 45.27 saint_john #> 3  2024-03-01       11.902529 45.27 saint_john #> 4  2024-04-01       13.528932 45.27 saint_john #> 5  2024-05-01       14.910968 45.27 saint_john #> 6  2024-06-01       15.593079 45.27 saint_john #> 7  2024-07-01       15.207900 45.27 saint_john #> 8  2024-08-01       13.954218 45.27 saint_john #> 9  2024-09-01       12.360833 45.27 saint_john #> 10 2024-10-01       10.748119 45.27 saint_john #> 11 2024-11-01        9.409230 45.27 saint_john #> 12 2024-12-01        8.785616 45.27 saint_john"},{"path":"https://jbaafi.github.io/climecol/reference/photoperiod_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Photoperiod table for a given year and location/latitude — photoperiod_year","title":"Photoperiod table for a given year and location/latitude — photoperiod_year","text":"Returns daily daylight length (hours) specified year.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/photoperiod_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Photoperiod table for a given year and location/latitude — photoperiod_year","text":"","code":"photoperiod_year(   year,   lat = NULL,   location = NULL,   aggregate = c(\"none\", \"month\") )"},{"path":"https://jbaafi.github.io/climecol/reference/photoperiod_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Photoperiod table for a given year and location/latitude — photoperiod_year","text":"year Integer year (e.g., 2020). lat Latitude decimal degrees. Ignored location supplied. location Optional location key; case-insensitive, ignores spaces/punct. Aliases like \"saint johns\" also work \"st_johns\". aggregate Return daily values (\"none\") monthly means (\"month\").","code":""},{"path":"https://jbaafi.github.io/climecol/reference/photoperiod_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Photoperiod table for a given year and location/latitude — photoperiod_year","text":"data.frame columns: date, daylength_hours, lat, location.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/photoperiod_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Photoperiod table for a given year and location/latitude — photoperiod_year","text":"","code":"# Daily photoperiod for 2020 at 47.56°N (St. John's, NL) photoperiod_year(2020, lat = 47.56) #>           date daylength_hours   lat  location #> 1   2020-01-01        8.517220 47.56 lat_47.56 #> 2   2020-01-02        8.532937 47.56 lat_47.56 #> 3   2020-01-03        8.549903 47.56 lat_47.56 #> 4   2020-01-04        8.568104 47.56 lat_47.56 #> 5   2020-01-05        8.587527 47.56 lat_47.56 #> 6   2020-01-06        8.608155 47.56 lat_47.56 #> 7   2020-01-07        8.629972 47.56 lat_47.56 #> 8   2020-01-08        8.652962 47.56 lat_47.56 #> 9   2020-01-09        8.677107 47.56 lat_47.56 #> 10  2020-01-10        8.702388 47.56 lat_47.56 #> 11  2020-01-11        8.728787 47.56 lat_47.56 #> 12  2020-01-12        8.756284 47.56 lat_47.56 #> 13  2020-01-13        8.784861 47.56 lat_47.56 #> 14  2020-01-14        8.814495 47.56 lat_47.56 #> 15  2020-01-15        8.845167 47.56 lat_47.56 #> 16  2020-01-16        8.876856 47.56 lat_47.56 #> 17  2020-01-17        8.909540 47.56 lat_47.56 #> 18  2020-01-18        8.943197 47.56 lat_47.56 #> 19  2020-01-19        8.977808 47.56 lat_47.56 #> 20  2020-01-20        9.013348 47.56 lat_47.56 #> 21  2020-01-21        9.049796 47.56 lat_47.56 #> 22  2020-01-22        9.087131 47.56 lat_47.56 #> 23  2020-01-23        9.125330 47.56 lat_47.56 #> 24  2020-01-24        9.164370 47.56 lat_47.56 #> 25  2020-01-25        9.204230 47.56 lat_47.56 #> 26  2020-01-26        9.244888 47.56 lat_47.56 #> 27  2020-01-27        9.286322 47.56 lat_47.56 #> 28  2020-01-28        9.328510 47.56 lat_47.56 #> 29  2020-01-29        9.371430 47.56 lat_47.56 #> 30  2020-01-30        9.415061 47.56 lat_47.56 #> 31  2020-01-31        9.459381 47.56 lat_47.56 #> 32  2020-02-01        9.504371 47.56 lat_47.56 #> 33  2020-02-02        9.550008 47.56 lat_47.56 #> 34  2020-02-03        9.596272 47.56 lat_47.56 #> 35  2020-02-04        9.643144 47.56 lat_47.56 #> 36  2020-02-05        9.690603 47.56 lat_47.56 #> 37  2020-02-06        9.738630 47.56 lat_47.56 #> 38  2020-02-07        9.787205 47.56 lat_47.56 #> 39  2020-02-08        9.836310 47.56 lat_47.56 #> 40  2020-02-09        9.885926 47.56 lat_47.56 #> 41  2020-02-10        9.936035 47.56 lat_47.56 #> 42  2020-02-11        9.986618 47.56 lat_47.56 #> 43  2020-02-12       10.037660 47.56 lat_47.56 #> 44  2020-02-13       10.089142 47.56 lat_47.56 #> 45  2020-02-14       10.141048 47.56 lat_47.56 #> 46  2020-02-15       10.193361 47.56 lat_47.56 #> 47  2020-02-16       10.246066 47.56 lat_47.56 #> 48  2020-02-17       10.299147 47.56 lat_47.56 #> 49  2020-02-18       10.352589 47.56 lat_47.56 #> 50  2020-02-19       10.406377 47.56 lat_47.56 #> 51  2020-02-20       10.460497 47.56 lat_47.56 #> 52  2020-02-21       10.514934 47.56 lat_47.56 #> 53  2020-02-22       10.569675 47.56 lat_47.56 #> 54  2020-02-23       10.624707 47.56 lat_47.56 #> 55  2020-02-24       10.680016 47.56 lat_47.56 #> 56  2020-02-25       10.735590 47.56 lat_47.56 #> 57  2020-02-26       10.791416 47.56 lat_47.56 #> 58  2020-02-27       10.847483 47.56 lat_47.56 #> 59  2020-02-28       10.903778 47.56 lat_47.56 #> 60  2020-02-29       10.960290 47.56 lat_47.56 #> 61  2020-03-01       11.017008 47.56 lat_47.56 #> 62  2020-03-02       11.073922 47.56 lat_47.56 #> 63  2020-03-03       11.131020 47.56 lat_47.56 #> 64  2020-03-04       11.188292 47.56 lat_47.56 #> 65  2020-03-05       11.245728 47.56 lat_47.56 #> 66  2020-03-06       11.303318 47.56 lat_47.56 #> 67  2020-03-07       11.361053 47.56 lat_47.56 #> 68  2020-03-08       11.418923 47.56 lat_47.56 #> 69  2020-03-09       11.476918 47.56 lat_47.56 #> 70  2020-03-10       11.535030 47.56 lat_47.56 #> 71  2020-03-11       11.593250 47.56 lat_47.56 #> 72  2020-03-12       11.651569 47.56 lat_47.56 #> 73  2020-03-13       11.709977 47.56 lat_47.56 #> 74  2020-03-14       11.768468 47.56 lat_47.56 #> 75  2020-03-15       11.827031 47.56 lat_47.56 #> 76  2020-03-16       11.885660 47.56 lat_47.56 #> 77  2020-03-17       11.944345 47.56 lat_47.56 #> 78  2020-03-18       12.003078 47.56 lat_47.56 #> 79  2020-03-19       12.061851 47.56 lat_47.56 #> 80  2020-03-20       12.120657 47.56 lat_47.56 #> 81  2020-03-21       12.179487 47.56 lat_47.56 #> 82  2020-03-22       12.238332 47.56 lat_47.56 #> 83  2020-03-23       12.297186 47.56 lat_47.56 #> 84  2020-03-24       12.356038 47.56 lat_47.56 #> 85  2020-03-25       12.414883 47.56 lat_47.56 #> 86  2020-03-26       12.473710 47.56 lat_47.56 #> 87  2020-03-27       12.532513 47.56 lat_47.56 #> 88  2020-03-28       12.591282 47.56 lat_47.56 #> 89  2020-03-29       12.650009 47.56 lat_47.56 #> 90  2020-03-30       12.708685 47.56 lat_47.56 #> 91  2020-03-31       12.767302 47.56 lat_47.56 #> 92  2020-04-01       12.825851 47.56 lat_47.56 #> 93  2020-04-02       12.884322 47.56 lat_47.56 #> 94  2020-04-03       12.942708 47.56 lat_47.56 #> 95  2020-04-04       13.000997 47.56 lat_47.56 #> 96  2020-04-05       13.059181 47.56 lat_47.56 #> 97  2020-04-06       13.117249 47.56 lat_47.56 #> 98  2020-04-07       13.175192 47.56 lat_47.56 #> 99  2020-04-08       13.233000 47.56 lat_47.56 #> 100 2020-04-09       13.290661 47.56 lat_47.56 #> 101 2020-04-10       13.348166 47.56 lat_47.56 #> 102 2020-04-11       13.405502 47.56 lat_47.56 #> 103 2020-04-12       13.462659 47.56 lat_47.56 #> 104 2020-04-13       13.519625 47.56 lat_47.56 #> 105 2020-04-14       13.576387 47.56 lat_47.56 #> 106 2020-04-15       13.632934 47.56 lat_47.56 #> 107 2020-04-16       13.689253 47.56 lat_47.56 #> 108 2020-04-17       13.745330 47.56 lat_47.56 #> 109 2020-04-18       13.801153 47.56 lat_47.56 #> 110 2020-04-19       13.856707 47.56 lat_47.56 #> 111 2020-04-20       13.911978 47.56 lat_47.56 #> 112 2020-04-21       13.966953 47.56 lat_47.56 #> 113 2020-04-22       14.021615 47.56 lat_47.56 #> 114 2020-04-23       14.075949 47.56 lat_47.56 #> 115 2020-04-24       14.129940 47.56 lat_47.56 #> 116 2020-04-25       14.183572 47.56 lat_47.56 #> 117 2020-04-26       14.236827 47.56 lat_47.56 #> 118 2020-04-27       14.289690 47.56 lat_47.56 #> 119 2020-04-28       14.342142 47.56 lat_47.56 #> 120 2020-04-29       14.394165 47.56 lat_47.56 #> 121 2020-04-30       14.445742 47.56 lat_47.56 #> 122 2020-05-01       14.496853 47.56 lat_47.56 #> 123 2020-05-02       14.547479 47.56 lat_47.56 #> 124 2020-05-03       14.597602 47.56 lat_47.56 #> 125 2020-05-04       14.647200 47.56 lat_47.56 #> 126 2020-05-05       14.696254 47.56 lat_47.56 #> 127 2020-05-06       14.744743 47.56 lat_47.56 #> 128 2020-05-07       14.792645 47.56 lat_47.56 #> 129 2020-05-08       14.839939 47.56 lat_47.56 #> 130 2020-05-09       14.886604 47.56 lat_47.56 #> 131 2020-05-10       14.932617 47.56 lat_47.56 #> 132 2020-05-11       14.977955 47.56 lat_47.56 #> 133 2020-05-12       15.022597 47.56 lat_47.56 #> 134 2020-05-13       15.066518 47.56 lat_47.56 #> 135 2020-05-14       15.109696 47.56 lat_47.56 #> 136 2020-05-15       15.152106 47.56 lat_47.56 #> 137 2020-05-16       15.193726 47.56 lat_47.56 #> 138 2020-05-17       15.234532 47.56 lat_47.56 #> 139 2020-05-18       15.274498 47.56 lat_47.56 #> 140 2020-05-19       15.313602 47.56 lat_47.56 #> 141 2020-05-20       15.351820 47.56 lat_47.56 #> 142 2020-05-21       15.389126 47.56 lat_47.56 #> 143 2020-05-22       15.425497 47.56 lat_47.56 #> 144 2020-05-23       15.460909 47.56 lat_47.56 #> 145 2020-05-24       15.495338 47.56 lat_47.56 #> 146 2020-05-25       15.528760 47.56 lat_47.56 #> 147 2020-05-26       15.561151 47.56 lat_47.56 #> 148 2020-05-27       15.592490 47.56 lat_47.56 #> 149 2020-05-28       15.622751 47.56 lat_47.56 #> 150 2020-05-29       15.651914 47.56 lat_47.56 #> 151 2020-05-30       15.679955 47.56 lat_47.56 #> 152 2020-05-31       15.706853 47.56 lat_47.56 #> 153 2020-06-01       15.732587 47.56 lat_47.56 #> 154 2020-06-02       15.757136 47.56 lat_47.56 #> 155 2020-06-03       15.780481 47.56 lat_47.56 #> 156 2020-06-04       15.802603 47.56 lat_47.56 #> 157 2020-06-05       15.823482 47.56 lat_47.56 #> 158 2020-06-06       15.843101 47.56 lat_47.56 #> 159 2020-06-07       15.861444 47.56 lat_47.56 #> 160 2020-06-08       15.878494 47.56 lat_47.56 #> 161 2020-06-09       15.894237 47.56 lat_47.56 #> 162 2020-06-10       15.908659 47.56 lat_47.56 #> 163 2020-06-11       15.921747 47.56 lat_47.56 #> 164 2020-06-12       15.933490 47.56 lat_47.56 #> 165 2020-06-13       15.943875 47.56 lat_47.56 #> 166 2020-06-14       15.952895 47.56 lat_47.56 #> 167 2020-06-15       15.960541 47.56 lat_47.56 #> 168 2020-06-16       15.966806 47.56 lat_47.56 #> 169 2020-06-17       15.971683 47.56 lat_47.56 #> 170 2020-06-18       15.975170 47.56 lat_47.56 #> 171 2020-06-19       15.977261 47.56 lat_47.56 #> 172 2020-06-20       15.977956 47.56 lat_47.56 #> 173 2020-06-21       15.977253 47.56 lat_47.56 #> 174 2020-06-22       15.975154 47.56 lat_47.56 #> 175 2020-06-23       15.971660 47.56 lat_47.56 #> 176 2020-06-24       15.966775 47.56 lat_47.56 #> 177 2020-06-25       15.960503 47.56 lat_47.56 #> 178 2020-06-26       15.952850 47.56 lat_47.56 #> 179 2020-06-27       15.943822 47.56 lat_47.56 #> 180 2020-06-28       15.933429 47.56 lat_47.56 #> 181 2020-06-29       15.921679 47.56 lat_47.56 #> 182 2020-06-30       15.908584 47.56 lat_47.56 #> 183 2020-07-01       15.894155 47.56 lat_47.56 #> 184 2020-07-02       15.878404 47.56 lat_47.56 #> 185 2020-07-03       15.861347 47.56 lat_47.56 #> 186 2020-07-04       15.842997 47.56 lat_47.56 #> 187 2020-07-05       15.823371 47.56 lat_47.56 #> 188 2020-07-06       15.802485 47.56 lat_47.56 #> 189 2020-07-07       15.780357 47.56 lat_47.56 #> 190 2020-07-08       15.757005 47.56 lat_47.56 #> 191 2020-07-09       15.732449 47.56 lat_47.56 #> 192 2020-07-10       15.706709 47.56 lat_47.56 #> 193 2020-07-11       15.679804 47.56 lat_47.56 #> 194 2020-07-12       15.651757 47.56 lat_47.56 #> 195 2020-07-13       15.622588 47.56 lat_47.56 #> 196 2020-07-14       15.592321 47.56 lat_47.56 #> 197 2020-07-15       15.560977 47.56 lat_47.56 #> 198 2020-07-16       15.528579 47.56 lat_47.56 #> 199 2020-07-17       15.495152 47.56 lat_47.56 #> 200 2020-07-18       15.460717 47.56 lat_47.56 #> 201 2020-07-19       15.425300 47.56 lat_47.56 #> 202 2020-07-20       15.388924 47.56 lat_47.56 #> 203 2020-07-21       15.351613 47.56 lat_47.56 #> 204 2020-07-22       15.313390 47.56 lat_47.56 #> 205 2020-07-23       15.274282 47.56 lat_47.56 #> 206 2020-07-24       15.234310 47.56 lat_47.56 #> 207 2020-07-25       15.193500 47.56 lat_47.56 #> 208 2020-07-26       15.151876 47.56 lat_47.56 #> 209 2020-07-27       15.109461 47.56 lat_47.56 #> 210 2020-07-28       15.066279 47.56 lat_47.56 #> 211 2020-07-29       15.022354 47.56 lat_47.56 #> 212 2020-07-30       14.977709 47.56 lat_47.56 #> 213 2020-07-31       14.932367 47.56 lat_47.56 #> 214 2020-08-01       14.886350 47.56 lat_47.56 #> 215 2020-08-02       14.839682 47.56 lat_47.56 #> 216 2020-08-03       14.792384 47.56 lat_47.56 #> 217 2020-08-04       14.744478 47.56 lat_47.56 #> 218 2020-08-05       14.695987 47.56 lat_47.56 #> 219 2020-08-06       14.646930 47.56 lat_47.56 #> 220 2020-08-07       14.597329 47.56 lat_47.56 #> 221 2020-08-08       14.547203 47.56 lat_47.56 #> 222 2020-08-09       14.496574 47.56 lat_47.56 #> 223 2020-08-10       14.445460 47.56 lat_47.56 #> 224 2020-08-11       14.393881 47.56 lat_47.56 #> 225 2020-08-12       14.341855 47.56 lat_47.56 #> 226 2020-08-13       14.289401 47.56 lat_47.56 #> 227 2020-08-14       14.236537 47.56 lat_47.56 #> 228 2020-08-15       14.183279 47.56 lat_47.56 #> 229 2020-08-16       14.129645 47.56 lat_47.56 #> 230 2020-08-17       14.075652 47.56 lat_47.56 #> 231 2020-08-18       14.021316 47.56 lat_47.56 #> 232 2020-08-19       13.966652 47.56 lat_47.56 #> 233 2020-08-20       13.911676 47.56 lat_47.56 #> 234 2020-08-21       13.856403 47.56 lat_47.56 #> 235 2020-08-22       13.800848 47.56 lat_47.56 #> 236 2020-08-23       13.745024 47.56 lat_47.56 #> 237 2020-08-24       13.688945 47.56 lat_47.56 #> 238 2020-08-25       13.632625 47.56 lat_47.56 #> 239 2020-08-26       13.576077 47.56 lat_47.56 #> 240 2020-08-27       13.519313 47.56 lat_47.56 #> 241 2020-08-28       13.462346 47.56 lat_47.56 #> 242 2020-08-29       13.405188 47.56 lat_47.56 #> 243 2020-08-30       13.347851 47.56 lat_47.56 #> 244 2020-08-31       13.290346 47.56 lat_47.56 #> 245 2020-09-01       13.232684 47.56 lat_47.56 #> 246 2020-09-02       13.174875 47.56 lat_47.56 #> 247 2020-09-03       13.116931 47.56 lat_47.56 #> 248 2020-09-04       13.058862 47.56 lat_47.56 #> 249 2020-09-05       13.000678 47.56 lat_47.56 #> 250 2020-09-06       12.942388 47.56 lat_47.56 #> 251 2020-09-07       12.884002 47.56 lat_47.56 #> 252 2020-09-08       12.825530 47.56 lat_47.56 #> 253 2020-09-09       12.766981 47.56 lat_47.56 #> 254 2020-09-10       12.708364 47.56 lat_47.56 #> 255 2020-09-11       12.649687 47.56 lat_47.56 #> 256 2020-09-12       12.590960 47.56 lat_47.56 #> 257 2020-09-13       12.532191 47.56 lat_47.56 #> 258 2020-09-14       12.473388 47.56 lat_47.56 #> 259 2020-09-15       12.414560 47.56 lat_47.56 #> 260 2020-09-16       12.355716 47.56 lat_47.56 #> 261 2020-09-17       12.296863 47.56 lat_47.56 #> 262 2020-09-18       12.238010 47.56 lat_47.56 #> 263 2020-09-19       12.179164 47.56 lat_47.56 #> 264 2020-09-20       12.120335 47.56 lat_47.56 #> 265 2020-09-21       12.061529 47.56 lat_47.56 #> 266 2020-09-22       12.002756 47.56 lat_47.56 #> 267 2020-09-23       11.944023 47.56 lat_47.56 #> 268 2020-09-24       11.885338 47.56 lat_47.56 #> 269 2020-09-25       11.826710 47.56 lat_47.56 #> 270 2020-09-26       11.768147 47.56 lat_47.56 #> 271 2020-09-27       11.709657 47.56 lat_47.56 #> 272 2020-09-28       11.651249 47.56 lat_47.56 #> 273 2020-09-29       11.592931 47.56 lat_47.56 #> 274 2020-09-30       11.534712 47.56 lat_47.56 #> 275 2020-10-01       11.476600 47.56 lat_47.56 #> 276 2020-10-02       11.418605 47.56 lat_47.56 #> 277 2020-10-03       11.360736 47.56 lat_47.56 #> 278 2020-10-04       11.303002 47.56 lat_47.56 #> 279 2020-10-05       11.245413 47.56 lat_47.56 #> 280 2020-10-06       11.187978 47.56 lat_47.56 #> 281 2020-10-07       11.130706 47.56 lat_47.56 #> 282 2020-10-08       11.073609 47.56 lat_47.56 #> 283 2020-10-09       11.016697 47.56 lat_47.56 #> 284 2020-10-10       10.959980 47.56 lat_47.56 #> 285 2020-10-11       10.903469 47.56 lat_47.56 #> 286 2020-10-12       10.847175 47.56 lat_47.56 #> 287 2020-10-13       10.791110 47.56 lat_47.56 #> 288 2020-10-14       10.735285 47.56 lat_47.56 #> 289 2020-10-15       10.679712 47.56 lat_47.56 #> 290 2020-10-16       10.624405 47.56 lat_47.56 #> 291 2020-10-17       10.569375 47.56 lat_47.56 #> 292 2020-10-18       10.514635 47.56 lat_47.56 #> 293 2020-10-19       10.460200 47.56 lat_47.56 #> 294 2020-10-20       10.406082 47.56 lat_47.56 #> 295 2020-10-21       10.352295 47.56 lat_47.56 #> 296 2020-10-22       10.298855 47.56 lat_47.56 #> 297 2020-10-23       10.245776 47.56 lat_47.56 #> 298 2020-10-24       10.193073 47.56 lat_47.56 #> 299 2020-10-25       10.140762 47.56 lat_47.56 #> 300 2020-10-26       10.088859 47.56 lat_47.56 #> 301 2020-10-27       10.037379 47.56 lat_47.56 #> 302 2020-10-28        9.986340 47.56 lat_47.56 #> 303 2020-10-29        9.935759 47.56 lat_47.56 #> 304 2020-10-30        9.885653 47.56 lat_47.56 #> 305 2020-10-31        9.836039 47.56 lat_47.56 #> 306 2020-11-01        9.786937 47.56 lat_47.56 #> 307 2020-11-02        9.738365 47.56 lat_47.56 #> 308 2020-11-03        9.690341 47.56 lat_47.56 #> 309 2020-11-04        9.642886 47.56 lat_47.56 #> 310 2020-11-05        9.596017 47.56 lat_47.56 #> 311 2020-11-06        9.549756 47.56 lat_47.56 #> 312 2020-11-07        9.504122 47.56 lat_47.56 #> 313 2020-11-08        9.459137 47.56 lat_47.56 #> 314 2020-11-09        9.414820 47.56 lat_47.56 #> 315 2020-11-10        9.371193 47.56 lat_47.56 #> 316 2020-11-11        9.328276 47.56 lat_47.56 #> 317 2020-11-12        9.286093 47.56 lat_47.56 #> 318 2020-11-13        9.244663 47.56 lat_47.56 #> 319 2020-11-14        9.204010 47.56 lat_47.56 #> 320 2020-11-15        9.164154 47.56 lat_47.56 #> 321 2020-11-16        9.125118 47.56 lat_47.56 #> 322 2020-11-17        9.086924 47.56 lat_47.56 #> 323 2020-11-18        9.049594 47.56 lat_47.56 #> 324 2020-11-19        9.013151 47.56 lat_47.56 #> 325 2020-11-20        8.977615 47.56 lat_47.56 #> 326 2020-11-21        8.943010 47.56 lat_47.56 #> 327 2020-11-22        8.909358 47.56 lat_47.56 #> 328 2020-11-23        8.876679 47.56 lat_47.56 #> 329 2020-11-24        8.844996 47.56 lat_47.56 #> 330 2020-11-25        8.814330 47.56 lat_47.56 #> 331 2020-11-26        8.784701 47.56 lat_47.56 #> 332 2020-11-27        8.756131 47.56 lat_47.56 #> 333 2020-11-28        8.728639 47.56 lat_47.56 #> 334 2020-11-29        8.702246 47.56 lat_47.56 #> 335 2020-11-30        8.676971 47.56 lat_47.56 #> 336 2020-12-01        8.652833 47.56 lat_47.56 #> 337 2020-12-02        8.629849 47.56 lat_47.56 #> 338 2020-12-03        8.608038 47.56 lat_47.56 #> 339 2020-12-04        8.587417 47.56 lat_47.56 #> 340 2020-12-05        8.568001 47.56 lat_47.56 #> 341 2020-12-06        8.549806 47.56 lat_47.56 #> 342 2020-12-07        8.532847 47.56 lat_47.56 #> 343 2020-12-08        8.517138 47.56 lat_47.56 #> 344 2020-12-09        8.502691 47.56 lat_47.56 #> 345 2020-12-10        8.489518 47.56 lat_47.56 #> 346 2020-12-11        8.477631 47.56 lat_47.56 #> 347 2020-12-12        8.467040 47.56 lat_47.56 #> 348 2020-12-13        8.457753 47.56 lat_47.56 #> 349 2020-12-14        8.449778 47.56 lat_47.56 #> 350 2020-12-15        8.443122 47.56 lat_47.56 #> 351 2020-12-16        8.437792 47.56 lat_47.56 #> 352 2020-12-17        8.433790 47.56 lat_47.56 #> 353 2020-12-18        8.431122 47.56 lat_47.56 #> 354 2020-12-19        8.429790 47.56 lat_47.56 #> 355 2020-12-20        8.429793 47.56 lat_47.56 #> 356 2020-12-21        8.431133 47.56 lat_47.56 #> 357 2020-12-22        8.433809 47.56 lat_47.56 #> 358 2020-12-23        8.437817 47.56 lat_47.56 #> 359 2020-12-24        8.443155 47.56 lat_47.56 #> 360 2020-12-25        8.449818 47.56 lat_47.56 #> 361 2020-12-26        8.457800 47.56 lat_47.56 #> 362 2020-12-27        8.467094 47.56 lat_47.56 #> 363 2020-12-28        8.477693 47.56 lat_47.56 #> 364 2020-12-29        8.489587 47.56 lat_47.56 #> 365 2020-12-30        8.502767 47.56 lat_47.56 #> 366 2020-12-31        8.517220 47.56 lat_47.56  # Using a built-in location name (case/punctuation agnostic) photoperiod_year(2020, location = \"St John's\") #>           date daylength_hours   lat location #> 1   2020-01-01        8.517220 47.56 st_johns #> 2   2020-01-02        8.532937 47.56 st_johns #> 3   2020-01-03        8.549903 47.56 st_johns #> 4   2020-01-04        8.568104 47.56 st_johns #> 5   2020-01-05        8.587527 47.56 st_johns #> 6   2020-01-06        8.608155 47.56 st_johns #> 7   2020-01-07        8.629972 47.56 st_johns #> 8   2020-01-08        8.652962 47.56 st_johns #> 9   2020-01-09        8.677107 47.56 st_johns #> 10  2020-01-10        8.702388 47.56 st_johns #> 11  2020-01-11        8.728787 47.56 st_johns #> 12  2020-01-12        8.756284 47.56 st_johns #> 13  2020-01-13        8.784861 47.56 st_johns #> 14  2020-01-14        8.814495 47.56 st_johns #> 15  2020-01-15        8.845167 47.56 st_johns #> 16  2020-01-16        8.876856 47.56 st_johns #> 17  2020-01-17        8.909540 47.56 st_johns #> 18  2020-01-18        8.943197 47.56 st_johns #> 19  2020-01-19        8.977808 47.56 st_johns #> 20  2020-01-20        9.013348 47.56 st_johns #> 21  2020-01-21        9.049796 47.56 st_johns #> 22  2020-01-22        9.087131 47.56 st_johns #> 23  2020-01-23        9.125330 47.56 st_johns #> 24  2020-01-24        9.164370 47.56 st_johns #> 25  2020-01-25        9.204230 47.56 st_johns #> 26  2020-01-26        9.244888 47.56 st_johns #> 27  2020-01-27        9.286322 47.56 st_johns #> 28  2020-01-28        9.328510 47.56 st_johns #> 29  2020-01-29        9.371430 47.56 st_johns #> 30  2020-01-30        9.415061 47.56 st_johns #> 31  2020-01-31        9.459381 47.56 st_johns #> 32  2020-02-01        9.504371 47.56 st_johns #> 33  2020-02-02        9.550008 47.56 st_johns #> 34  2020-02-03        9.596272 47.56 st_johns #> 35  2020-02-04        9.643144 47.56 st_johns #> 36  2020-02-05        9.690603 47.56 st_johns #> 37  2020-02-06        9.738630 47.56 st_johns #> 38  2020-02-07        9.787205 47.56 st_johns #> 39  2020-02-08        9.836310 47.56 st_johns #> 40  2020-02-09        9.885926 47.56 st_johns #> 41  2020-02-10        9.936035 47.56 st_johns #> 42  2020-02-11        9.986618 47.56 st_johns #> 43  2020-02-12       10.037660 47.56 st_johns #> 44  2020-02-13       10.089142 47.56 st_johns #> 45  2020-02-14       10.141048 47.56 st_johns #> 46  2020-02-15       10.193361 47.56 st_johns #> 47  2020-02-16       10.246066 47.56 st_johns #> 48  2020-02-17       10.299147 47.56 st_johns #> 49  2020-02-18       10.352589 47.56 st_johns #> 50  2020-02-19       10.406377 47.56 st_johns #> 51  2020-02-20       10.460497 47.56 st_johns #> 52  2020-02-21       10.514934 47.56 st_johns #> 53  2020-02-22       10.569675 47.56 st_johns #> 54  2020-02-23       10.624707 47.56 st_johns #> 55  2020-02-24       10.680016 47.56 st_johns #> 56  2020-02-25       10.735590 47.56 st_johns #> 57  2020-02-26       10.791416 47.56 st_johns #> 58  2020-02-27       10.847483 47.56 st_johns #> 59  2020-02-28       10.903778 47.56 st_johns #> 60  2020-02-29       10.960290 47.56 st_johns #> 61  2020-03-01       11.017008 47.56 st_johns #> 62  2020-03-02       11.073922 47.56 st_johns #> 63  2020-03-03       11.131020 47.56 st_johns #> 64  2020-03-04       11.188292 47.56 st_johns #> 65  2020-03-05       11.245728 47.56 st_johns #> 66  2020-03-06       11.303318 47.56 st_johns #> 67  2020-03-07       11.361053 47.56 st_johns #> 68  2020-03-08       11.418923 47.56 st_johns #> 69  2020-03-09       11.476918 47.56 st_johns #> 70  2020-03-10       11.535030 47.56 st_johns #> 71  2020-03-11       11.593250 47.56 st_johns #> 72  2020-03-12       11.651569 47.56 st_johns #> 73  2020-03-13       11.709977 47.56 st_johns #> 74  2020-03-14       11.768468 47.56 st_johns #> 75  2020-03-15       11.827031 47.56 st_johns #> 76  2020-03-16       11.885660 47.56 st_johns #> 77  2020-03-17       11.944345 47.56 st_johns #> 78  2020-03-18       12.003078 47.56 st_johns #> 79  2020-03-19       12.061851 47.56 st_johns #> 80  2020-03-20       12.120657 47.56 st_johns #> 81  2020-03-21       12.179487 47.56 st_johns #> 82  2020-03-22       12.238332 47.56 st_johns #> 83  2020-03-23       12.297186 47.56 st_johns #> 84  2020-03-24       12.356038 47.56 st_johns #> 85  2020-03-25       12.414883 47.56 st_johns #> 86  2020-03-26       12.473710 47.56 st_johns #> 87  2020-03-27       12.532513 47.56 st_johns #> 88  2020-03-28       12.591282 47.56 st_johns #> 89  2020-03-29       12.650009 47.56 st_johns #> 90  2020-03-30       12.708685 47.56 st_johns #> 91  2020-03-31       12.767302 47.56 st_johns #> 92  2020-04-01       12.825851 47.56 st_johns #> 93  2020-04-02       12.884322 47.56 st_johns #> 94  2020-04-03       12.942708 47.56 st_johns #> 95  2020-04-04       13.000997 47.56 st_johns #> 96  2020-04-05       13.059181 47.56 st_johns #> 97  2020-04-06       13.117249 47.56 st_johns #> 98  2020-04-07       13.175192 47.56 st_johns #> 99  2020-04-08       13.233000 47.56 st_johns #> 100 2020-04-09       13.290661 47.56 st_johns #> 101 2020-04-10       13.348166 47.56 st_johns #> 102 2020-04-11       13.405502 47.56 st_johns #> 103 2020-04-12       13.462659 47.56 st_johns #> 104 2020-04-13       13.519625 47.56 st_johns #> 105 2020-04-14       13.576387 47.56 st_johns #> 106 2020-04-15       13.632934 47.56 st_johns #> 107 2020-04-16       13.689253 47.56 st_johns #> 108 2020-04-17       13.745330 47.56 st_johns #> 109 2020-04-18       13.801153 47.56 st_johns #> 110 2020-04-19       13.856707 47.56 st_johns #> 111 2020-04-20       13.911978 47.56 st_johns #> 112 2020-04-21       13.966953 47.56 st_johns #> 113 2020-04-22       14.021615 47.56 st_johns #> 114 2020-04-23       14.075949 47.56 st_johns #> 115 2020-04-24       14.129940 47.56 st_johns #> 116 2020-04-25       14.183572 47.56 st_johns #> 117 2020-04-26       14.236827 47.56 st_johns #> 118 2020-04-27       14.289690 47.56 st_johns #> 119 2020-04-28       14.342142 47.56 st_johns #> 120 2020-04-29       14.394165 47.56 st_johns #> 121 2020-04-30       14.445742 47.56 st_johns #> 122 2020-05-01       14.496853 47.56 st_johns #> 123 2020-05-02       14.547479 47.56 st_johns #> 124 2020-05-03       14.597602 47.56 st_johns #> 125 2020-05-04       14.647200 47.56 st_johns #> 126 2020-05-05       14.696254 47.56 st_johns #> 127 2020-05-06       14.744743 47.56 st_johns #> 128 2020-05-07       14.792645 47.56 st_johns #> 129 2020-05-08       14.839939 47.56 st_johns #> 130 2020-05-09       14.886604 47.56 st_johns #> 131 2020-05-10       14.932617 47.56 st_johns #> 132 2020-05-11       14.977955 47.56 st_johns #> 133 2020-05-12       15.022597 47.56 st_johns #> 134 2020-05-13       15.066518 47.56 st_johns #> 135 2020-05-14       15.109696 47.56 st_johns #> 136 2020-05-15       15.152106 47.56 st_johns #> 137 2020-05-16       15.193726 47.56 st_johns #> 138 2020-05-17       15.234532 47.56 st_johns #> 139 2020-05-18       15.274498 47.56 st_johns #> 140 2020-05-19       15.313602 47.56 st_johns #> 141 2020-05-20       15.351820 47.56 st_johns #> 142 2020-05-21       15.389126 47.56 st_johns #> 143 2020-05-22       15.425497 47.56 st_johns #> 144 2020-05-23       15.460909 47.56 st_johns #> 145 2020-05-24       15.495338 47.56 st_johns #> 146 2020-05-25       15.528760 47.56 st_johns #> 147 2020-05-26       15.561151 47.56 st_johns #> 148 2020-05-27       15.592490 47.56 st_johns #> 149 2020-05-28       15.622751 47.56 st_johns #> 150 2020-05-29       15.651914 47.56 st_johns #> 151 2020-05-30       15.679955 47.56 st_johns #> 152 2020-05-31       15.706853 47.56 st_johns #> 153 2020-06-01       15.732587 47.56 st_johns #> 154 2020-06-02       15.757136 47.56 st_johns #> 155 2020-06-03       15.780481 47.56 st_johns #> 156 2020-06-04       15.802603 47.56 st_johns #> 157 2020-06-05       15.823482 47.56 st_johns #> 158 2020-06-06       15.843101 47.56 st_johns #> 159 2020-06-07       15.861444 47.56 st_johns #> 160 2020-06-08       15.878494 47.56 st_johns #> 161 2020-06-09       15.894237 47.56 st_johns #> 162 2020-06-10       15.908659 47.56 st_johns #> 163 2020-06-11       15.921747 47.56 st_johns #> 164 2020-06-12       15.933490 47.56 st_johns #> 165 2020-06-13       15.943875 47.56 st_johns #> 166 2020-06-14       15.952895 47.56 st_johns #> 167 2020-06-15       15.960541 47.56 st_johns #> 168 2020-06-16       15.966806 47.56 st_johns #> 169 2020-06-17       15.971683 47.56 st_johns #> 170 2020-06-18       15.975170 47.56 st_johns #> 171 2020-06-19       15.977261 47.56 st_johns #> 172 2020-06-20       15.977956 47.56 st_johns #> 173 2020-06-21       15.977253 47.56 st_johns #> 174 2020-06-22       15.975154 47.56 st_johns #> 175 2020-06-23       15.971660 47.56 st_johns #> 176 2020-06-24       15.966775 47.56 st_johns #> 177 2020-06-25       15.960503 47.56 st_johns #> 178 2020-06-26       15.952850 47.56 st_johns #> 179 2020-06-27       15.943822 47.56 st_johns #> 180 2020-06-28       15.933429 47.56 st_johns #> 181 2020-06-29       15.921679 47.56 st_johns #> 182 2020-06-30       15.908584 47.56 st_johns #> 183 2020-07-01       15.894155 47.56 st_johns #> 184 2020-07-02       15.878404 47.56 st_johns #> 185 2020-07-03       15.861347 47.56 st_johns #> 186 2020-07-04       15.842997 47.56 st_johns #> 187 2020-07-05       15.823371 47.56 st_johns #> 188 2020-07-06       15.802485 47.56 st_johns #> 189 2020-07-07       15.780357 47.56 st_johns #> 190 2020-07-08       15.757005 47.56 st_johns #> 191 2020-07-09       15.732449 47.56 st_johns #> 192 2020-07-10       15.706709 47.56 st_johns #> 193 2020-07-11       15.679804 47.56 st_johns #> 194 2020-07-12       15.651757 47.56 st_johns #> 195 2020-07-13       15.622588 47.56 st_johns #> 196 2020-07-14       15.592321 47.56 st_johns #> 197 2020-07-15       15.560977 47.56 st_johns #> 198 2020-07-16       15.528579 47.56 st_johns #> 199 2020-07-17       15.495152 47.56 st_johns #> 200 2020-07-18       15.460717 47.56 st_johns #> 201 2020-07-19       15.425300 47.56 st_johns #> 202 2020-07-20       15.388924 47.56 st_johns #> 203 2020-07-21       15.351613 47.56 st_johns #> 204 2020-07-22       15.313390 47.56 st_johns #> 205 2020-07-23       15.274282 47.56 st_johns #> 206 2020-07-24       15.234310 47.56 st_johns #> 207 2020-07-25       15.193500 47.56 st_johns #> 208 2020-07-26       15.151876 47.56 st_johns #> 209 2020-07-27       15.109461 47.56 st_johns #> 210 2020-07-28       15.066279 47.56 st_johns #> 211 2020-07-29       15.022354 47.56 st_johns #> 212 2020-07-30       14.977709 47.56 st_johns #> 213 2020-07-31       14.932367 47.56 st_johns #> 214 2020-08-01       14.886350 47.56 st_johns #> 215 2020-08-02       14.839682 47.56 st_johns #> 216 2020-08-03       14.792384 47.56 st_johns #> 217 2020-08-04       14.744478 47.56 st_johns #> 218 2020-08-05       14.695987 47.56 st_johns #> 219 2020-08-06       14.646930 47.56 st_johns #> 220 2020-08-07       14.597329 47.56 st_johns #> 221 2020-08-08       14.547203 47.56 st_johns #> 222 2020-08-09       14.496574 47.56 st_johns #> 223 2020-08-10       14.445460 47.56 st_johns #> 224 2020-08-11       14.393881 47.56 st_johns #> 225 2020-08-12       14.341855 47.56 st_johns #> 226 2020-08-13       14.289401 47.56 st_johns #> 227 2020-08-14       14.236537 47.56 st_johns #> 228 2020-08-15       14.183279 47.56 st_johns #> 229 2020-08-16       14.129645 47.56 st_johns #> 230 2020-08-17       14.075652 47.56 st_johns #> 231 2020-08-18       14.021316 47.56 st_johns #> 232 2020-08-19       13.966652 47.56 st_johns #> 233 2020-08-20       13.911676 47.56 st_johns #> 234 2020-08-21       13.856403 47.56 st_johns #> 235 2020-08-22       13.800848 47.56 st_johns #> 236 2020-08-23       13.745024 47.56 st_johns #> 237 2020-08-24       13.688945 47.56 st_johns #> 238 2020-08-25       13.632625 47.56 st_johns #> 239 2020-08-26       13.576077 47.56 st_johns #> 240 2020-08-27       13.519313 47.56 st_johns #> 241 2020-08-28       13.462346 47.56 st_johns #> 242 2020-08-29       13.405188 47.56 st_johns #> 243 2020-08-30       13.347851 47.56 st_johns #> 244 2020-08-31       13.290346 47.56 st_johns #> 245 2020-09-01       13.232684 47.56 st_johns #> 246 2020-09-02       13.174875 47.56 st_johns #> 247 2020-09-03       13.116931 47.56 st_johns #> 248 2020-09-04       13.058862 47.56 st_johns #> 249 2020-09-05       13.000678 47.56 st_johns #> 250 2020-09-06       12.942388 47.56 st_johns #> 251 2020-09-07       12.884002 47.56 st_johns #> 252 2020-09-08       12.825530 47.56 st_johns #> 253 2020-09-09       12.766981 47.56 st_johns #> 254 2020-09-10       12.708364 47.56 st_johns #> 255 2020-09-11       12.649687 47.56 st_johns #> 256 2020-09-12       12.590960 47.56 st_johns #> 257 2020-09-13       12.532191 47.56 st_johns #> 258 2020-09-14       12.473388 47.56 st_johns #> 259 2020-09-15       12.414560 47.56 st_johns #> 260 2020-09-16       12.355716 47.56 st_johns #> 261 2020-09-17       12.296863 47.56 st_johns #> 262 2020-09-18       12.238010 47.56 st_johns #> 263 2020-09-19       12.179164 47.56 st_johns #> 264 2020-09-20       12.120335 47.56 st_johns #> 265 2020-09-21       12.061529 47.56 st_johns #> 266 2020-09-22       12.002756 47.56 st_johns #> 267 2020-09-23       11.944023 47.56 st_johns #> 268 2020-09-24       11.885338 47.56 st_johns #> 269 2020-09-25       11.826710 47.56 st_johns #> 270 2020-09-26       11.768147 47.56 st_johns #> 271 2020-09-27       11.709657 47.56 st_johns #> 272 2020-09-28       11.651249 47.56 st_johns #> 273 2020-09-29       11.592931 47.56 st_johns #> 274 2020-09-30       11.534712 47.56 st_johns #> 275 2020-10-01       11.476600 47.56 st_johns #> 276 2020-10-02       11.418605 47.56 st_johns #> 277 2020-10-03       11.360736 47.56 st_johns #> 278 2020-10-04       11.303002 47.56 st_johns #> 279 2020-10-05       11.245413 47.56 st_johns #> 280 2020-10-06       11.187978 47.56 st_johns #> 281 2020-10-07       11.130706 47.56 st_johns #> 282 2020-10-08       11.073609 47.56 st_johns #> 283 2020-10-09       11.016697 47.56 st_johns #> 284 2020-10-10       10.959980 47.56 st_johns #> 285 2020-10-11       10.903469 47.56 st_johns #> 286 2020-10-12       10.847175 47.56 st_johns #> 287 2020-10-13       10.791110 47.56 st_johns #> 288 2020-10-14       10.735285 47.56 st_johns #> 289 2020-10-15       10.679712 47.56 st_johns #> 290 2020-10-16       10.624405 47.56 st_johns #> 291 2020-10-17       10.569375 47.56 st_johns #> 292 2020-10-18       10.514635 47.56 st_johns #> 293 2020-10-19       10.460200 47.56 st_johns #> 294 2020-10-20       10.406082 47.56 st_johns #> 295 2020-10-21       10.352295 47.56 st_johns #> 296 2020-10-22       10.298855 47.56 st_johns #> 297 2020-10-23       10.245776 47.56 st_johns #> 298 2020-10-24       10.193073 47.56 st_johns #> 299 2020-10-25       10.140762 47.56 st_johns #> 300 2020-10-26       10.088859 47.56 st_johns #> 301 2020-10-27       10.037379 47.56 st_johns #> 302 2020-10-28        9.986340 47.56 st_johns #> 303 2020-10-29        9.935759 47.56 st_johns #> 304 2020-10-30        9.885653 47.56 st_johns #> 305 2020-10-31        9.836039 47.56 st_johns #> 306 2020-11-01        9.786937 47.56 st_johns #> 307 2020-11-02        9.738365 47.56 st_johns #> 308 2020-11-03        9.690341 47.56 st_johns #> 309 2020-11-04        9.642886 47.56 st_johns #> 310 2020-11-05        9.596017 47.56 st_johns #> 311 2020-11-06        9.549756 47.56 st_johns #> 312 2020-11-07        9.504122 47.56 st_johns #> 313 2020-11-08        9.459137 47.56 st_johns #> 314 2020-11-09        9.414820 47.56 st_johns #> 315 2020-11-10        9.371193 47.56 st_johns #> 316 2020-11-11        9.328276 47.56 st_johns #> 317 2020-11-12        9.286093 47.56 st_johns #> 318 2020-11-13        9.244663 47.56 st_johns #> 319 2020-11-14        9.204010 47.56 st_johns #> 320 2020-11-15        9.164154 47.56 st_johns #> 321 2020-11-16        9.125118 47.56 st_johns #> 322 2020-11-17        9.086924 47.56 st_johns #> 323 2020-11-18        9.049594 47.56 st_johns #> 324 2020-11-19        9.013151 47.56 st_johns #> 325 2020-11-20        8.977615 47.56 st_johns #> 326 2020-11-21        8.943010 47.56 st_johns #> 327 2020-11-22        8.909358 47.56 st_johns #> 328 2020-11-23        8.876679 47.56 st_johns #> 329 2020-11-24        8.844996 47.56 st_johns #> 330 2020-11-25        8.814330 47.56 st_johns #> 331 2020-11-26        8.784701 47.56 st_johns #> 332 2020-11-27        8.756131 47.56 st_johns #> 333 2020-11-28        8.728639 47.56 st_johns #> 334 2020-11-29        8.702246 47.56 st_johns #> 335 2020-11-30        8.676971 47.56 st_johns #> 336 2020-12-01        8.652833 47.56 st_johns #> 337 2020-12-02        8.629849 47.56 st_johns #> 338 2020-12-03        8.608038 47.56 st_johns #> 339 2020-12-04        8.587417 47.56 st_johns #> 340 2020-12-05        8.568001 47.56 st_johns #> 341 2020-12-06        8.549806 47.56 st_johns #> 342 2020-12-07        8.532847 47.56 st_johns #> 343 2020-12-08        8.517138 47.56 st_johns #> 344 2020-12-09        8.502691 47.56 st_johns #> 345 2020-12-10        8.489518 47.56 st_johns #> 346 2020-12-11        8.477631 47.56 st_johns #> 347 2020-12-12        8.467040 47.56 st_johns #> 348 2020-12-13        8.457753 47.56 st_johns #> 349 2020-12-14        8.449778 47.56 st_johns #> 350 2020-12-15        8.443122 47.56 st_johns #> 351 2020-12-16        8.437792 47.56 st_johns #> 352 2020-12-17        8.433790 47.56 st_johns #> 353 2020-12-18        8.431122 47.56 st_johns #> 354 2020-12-19        8.429790 47.56 st_johns #> 355 2020-12-20        8.429793 47.56 st_johns #> 356 2020-12-21        8.431133 47.56 st_johns #> 357 2020-12-22        8.433809 47.56 st_johns #> 358 2020-12-23        8.437817 47.56 st_johns #> 359 2020-12-24        8.443155 47.56 st_johns #> 360 2020-12-25        8.449818 47.56 st_johns #> 361 2020-12-26        8.457800 47.56 st_johns #> 362 2020-12-27        8.467094 47.56 st_johns #> 363 2020-12-28        8.477693 47.56 st_johns #> 364 2020-12-29        8.489587 47.56 st_johns #> 365 2020-12-30        8.502767 47.56 st_johns #> 366 2020-12-31        8.517220 47.56 st_johns  # Monthly means at 47.56°N photoperiod_year(2020, lat = 47.56, aggregate = \"month\") #>          date daylength_hours   lat  location #> 1  2020-01-01        8.916550 47.56 lat_47.56 #> 2  2020-02-01       10.207203 47.56 lat_47.56 #> 3  2020-03-01       11.887952 47.56 lat_47.56 #> 4  2020-04-01       13.652182 47.56 lat_47.56 #> 5  2020-05-01       15.161088 47.56 lat_47.56 #> 6  2020-06-01       15.912512 47.56 lat_47.56 #> 7  2020-07-01       15.487501 47.56 lat_47.56 #> 8  2020-08-01       14.115072 47.56 lat_47.56 #> 9  2020-09-01       12.384641 47.56 lat_47.56 #> 10 2020-10-01       10.635663 47.56 lat_47.56 #> 11 2020-11-01        9.175674 47.56 lat_47.56 #> 12 2020-12-01        8.490440 47.56 lat_47.56"},{"path":"https://jbaafi.github.io/climecol/reference/plot_rainfall.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Daily Rainfall — plot_rainfall","title":"Plot Daily Rainfall — plot_rainfall","text":"Creates simple bar chart daily rainfall totals using ggplot2.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/plot_rainfall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Daily Rainfall — plot_rainfall","text":"","code":"plot_rainfall(df)"},{"path":"https://jbaafi.github.io/climecol/reference/plot_rainfall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Daily Rainfall — plot_rainfall","text":"df data frame columns: Date Date observation (Date character convertible Date) Rain_mm Daily rainfall total millimeters (numeric)","code":""},{"path":"https://jbaafi.github.io/climecol/reference/plot_rainfall.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Daily Rainfall — plot_rainfall","text":"ggplot object showing rainfall time.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/plot_rainfall.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Daily Rainfall — plot_rainfall","text":"","code":"data(weather_nl) plot_rainfall(weather_nl) #> Warning: Removed 371 rows containing missing values or values outside the scale range #> (`geom_col()`)."},{"path":"https://jbaafi.github.io/climecol/reference/read_weather_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a raw weather CSV and standardize columns — read_weather_csv","title":"Read a raw weather CSV and standardize columns — read_weather_csv","text":"Imports raw weather CSV source returns tibble standardized column names/units climecol functions can rely . can pass custom mapping adapt different header names; default, include mapping Environment Canada daily files. Standard schema returned (columns may NA supplied): date (Date) station (chr) climate_id (chr) lon, lat (numeric; degrees) tmax_c, tmin_c, tavg_c (°C) rain_mm (mm), snow_cm (cm), precip_mm (mm) snow_on_ground_cm (cm) wind_spd_kmh (km/h), wind_dir_deg (0–360)","code":""},{"path":"https://jbaafi.github.io/climecol/reference/read_weather_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a raw weather CSV and standardize columns — read_weather_csv","text":"","code":"read_weather_csv(   path,   mapping = default_weather_mapping(),   station = NULL,   tz = \"UTC\",   na = c(\"NA\", \"\", \"M\", \"-9999\", \"-9999.9\") )"},{"path":"https://jbaafi.github.io/climecol/reference/read_weather_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a raw weather CSV and standardize columns — read_weather_csv","text":"path Path CSV file. mapping Named character vector mapping raw CSV headers standardized names. See default_weather_mapping() example. Names = raw column headers (case/punctuation), values = one standard names listed . station Optional character override/set station column. tz Timezone used parsing datetimes (needed). Default \"UTC\". na Character vector strings treat missing.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/read_weather_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a raw weather CSV and standardize columns — read_weather_csv","text":"tibble standard schema (columns present; may NA).","code":""},{"path":"https://jbaafi.github.io/climecol/reference/read_weather_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a raw weather CSV and standardize columns — read_weather_csv","text":"","code":"if (FALSE) { # \\dontrun{ df <- read_weather_csv(\"data-raw/ec_daily_2013_2023.csv\") head(df) } # }"},{"path":"https://jbaafi.github.io/climecol/reference/sample_rainfall_by_month.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample daily rainfall by month — sample_rainfall_by_month","title":"Sample daily rainfall by month — sample_rainfall_by_month","text":"Generates synthetic daily rainfall series resampling observed daily values calendar month across years. preserves month's empirical distribution (including dry-day frequency) without imposing parametric model.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/sample_rainfall_by_month.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample daily rainfall by month — sample_rainfall_by_month","text":"","code":"sample_rainfall_by_month(   dates,   df,   rain_col = NULL,   drop_na = TRUE,   na_as_zero = TRUE,   replace = TRUE,   origin = \"2000-01-01\",   seed = NULL )"},{"path":"https://jbaafi.github.io/climecol/reference/sample_rainfall_by_month.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample daily rainfall by month — sample_rainfall_by_month","text":"dates vector Dates simulate (one value returned per date). Alternatively, numeric/integer vector treated day offsets origin. df data frame observed daily rainfall. Ideally contains date rain_mm (lowercase). , function attempts standardize via normalize_weather_names(). date missing, integer Month month column must exist. rain_col Optional. Name rainfall column df. default, tries rain_mm normalization, falls back column whose name matches \"rain|precip\" (case-insensitive). drop_na Logical; TRUE (default) remove NA values monthly sampling pools. na_as_zero Logical; return 0 sampled NAs (default TRUE). Ignored drop_na = TRUE since NAs removed pools. replace Logical; sample replacement. Default TRUE. origin dates numeric, interpret days since origin (default \"2000-01-01\"). Ignored dates Dates. seed Optional integer reproducible sampling. Default NULL.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/sample_rainfall_by_month.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample daily rainfall by month — sample_rainfall_by_month","text":"numeric vector length length(dates) simulated daily rain (mm).","code":""},{"path":"https://jbaafi.github.io/climecol/reference/sample_rainfall_by_month.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample daily rainfall by month — sample_rainfall_by_month","text":"function robust varied input column names: first attempt standardize normalize_weather_names(), look rainfall column (rain_mm default) derive month date present.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/sample_rainfall_by_month.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample daily rainfall by month — sample_rainfall_by_month","text":"","code":"# Using the shipped example data data(weather_nl) set.seed(123) dseq <- seq.Date(as.Date(\"2012-01-01\"), as.Date(\"2012-01-10\"), by = \"day\") sim  <- sample_rainfall_by_month(dseq, weather_nl) sim #>  [1] 0.0 0.0 0.0 0.0 0.4 0.0 0.0 0.0 0.0 0.0  # Numeric date offsets (days since origin) sample_rainfall_by_month(0:9, weather_nl, origin = \"2012-01-01\") #>  [1]  0.0  0.0  0.0  0.0 22.2  4.0  0.0  0.0  4.0  0.4"},{"path":"https://jbaafi.github.io/climecol/reference/simulate_temp_shifts.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate temperature shift scenarios from a fitted seasonal curve — simulate_temp_shifts","title":"Simulate temperature shift scenarios from a fitted seasonal curve — simulate_temp_shifts","text":"Given output fit_seasonal_temp(), generate temperature scenarios adding fixed deltas (e.g., +0 +5 °C) fitted daily mean cycle.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/simulate_temp_shifts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate temperature shift scenarios from a fitted seasonal curve — simulate_temp_shifts","text":"","code":"simulate_temp_shifts(   fit,   deltas = 0:5,   model = \"best\",   dates = NULL,   as_long = TRUE )"},{"path":"https://jbaafi.github.io/climecol/reference/simulate_temp_shifts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate temperature shift scenarios from a fitted seasonal curve — simulate_temp_shifts","text":"fit result list fit_seasonal_temp(). deltas Numeric vector °C increments add (default 0:5). model fitted model use. Use \"best\" (default; lowest AIC) specific model name present fit$metrics$model (e.g., \"sin1\"). dates Optional Date vector. supplied, fitted day--year curve mapped dates (using lubridate::yday); otherwise native day_of_year fit$daily_avg (1–365) used. as_long Logical; TRUE (default) return long format columns key (scenario label) temp_c. FALSE, return wide columns baseline, Temp+1C, Temp+2C, ...","code":""},{"path":"https://jbaafi.github.io/climecol/reference/simulate_temp_shifts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate temperature shift scenarios from a fitted seasonal curve — simulate_temp_shifts","text":"tibble either day_of_year (dates) date (provided), plus simulated temperatures across scenarios.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/simulate_temp_shifts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate temperature shift scenarios from a fitted seasonal curve — simulate_temp_shifts","text":"","code":"data(weather_nl) fit <- fit_seasonal_temp(weather_nl, funcs = c(\"sin1\",\"sin2\")) sims <- simulate_temp_shifts(fit, deltas = 0:5)      # long format over DOY head(sims) #> # A tibble: 6 × 3 #>   day_of_year key      temp_c #>         <dbl> <fct>     <dbl> #> 1           1 baseline -1.16  #> 2           1 Temp+0C  -1.16  #> 3           1 Temp+1C  -0.159 #> 4           1 Temp+2C   0.841 #> 5           1 Temp+3C   1.84  #> 6           1 Temp+4C   2.84   # Map to actual dates: days <- seq(as.Date(\"2024-01-01\"), as.Date(\"2024-12-31\"), by = \"day\") sims_dates <- simulate_temp_shifts(fit, deltas = c(0, 2, 5), dates = days, model = \"best\") head(sims_dates) #> # A tibble: 6 × 3 #>   date       key      temp_c #>   <date>     <fct>     <dbl> #> 1 2024-01-01 baseline -1.16  #> 2 2024-01-01 Temp+0C  -1.16  #> 3 2024-01-01 Temp+2C   0.841 #> 4 2024-01-01 Temp+5C   3.84  #> 5 2024-01-02 baseline -1.29  #> 6 2024-01-02 Temp+0C  -1.29"},{"path":"https://jbaafi.github.io/climecol/reference/summarise_gaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise gaps in daily weather records — summarise_gaps","title":"Summarise gaps in daily weather records — summarise_gaps","text":"Provides simple coverage metrics per station (optionally month).","code":""},{"path":"https://jbaafi.github.io/climecol/reference/summarise_gaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise gaps in daily weather records — summarise_gaps","text":"","code":"summarise_gaps(df, by = c(\"station\", \"month\"))"},{"path":"https://jbaafi.github.io/climecol/reference/summarise_gaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise gaps in daily weather records — summarise_gaps","text":"df Tibble least date station. Character, one \"station\" (default) \"month\". \"month\", summaries returned per station-month.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/summarise_gaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise gaps in daily weather records — summarise_gaps","text":"tibble counts: total days, missing days, coverage proportion, number contiguous gaps, longest gap length.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/summarise_rainfall_monthly.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise Rainfall by Month — summarise_rainfall_monthly","title":"Summarise Rainfall by Month — summarise_rainfall_monthly","text":"Returns monthly total rainfall daily data, ensuring months present.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/summarise_rainfall_monthly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise Rainfall by Month — summarise_rainfall_monthly","text":"","code":"summarise_rainfall_monthly(df)"},{"path":"https://jbaafi.github.io/climecol/reference/summarise_rainfall_monthly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise Rainfall by Month — summarise_rainfall_monthly","text":"df Data frame columns Date Rain_mm.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/summarise_rainfall_monthly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise Rainfall by Month — summarise_rainfall_monthly","text":"tibble columns Year, Month, Rain_mm.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/summarise_rainfall_monthly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise Rainfall by Month — summarise_rainfall_monthly","text":"","code":"data(weather_nl) summarise_rainfall_monthly(weather_nl) #> # A tibble: 192 × 3 #>     Year Month Rain_mm #>    <int> <int>   <dbl> #>  1  2008     1    75.7 #>  2  2008     2    70.6 #>  3  2008     3   103.  #>  4  2008     4   105   #>  5  2008     5   119.  #>  6  2008     6   129.  #>  7  2008     7   107.  #>  8  2008     8   123.  #>  9  2008     9    67.6 #> 10  2008    10   134.  #> # ℹ 182 more rows"},{"path":"https://jbaafi.github.io/climecol/reference/validate_weather.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a standardized weather table — validate_weather","title":"Validate a standardized weather table — validate_weather","text":"Validate standardized weather table","code":""},{"path":"https://jbaafi.github.io/climecol/reference/validate_weather.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a standardized weather table — validate_weather","text":"","code":"validate_weather(   df,   temp_bounds = c(-60, 60),   rain_max = 200,   snow_max = Inf,   check_precip_consistency = TRUE,   swe_ratio = 10 )"},{"path":"https://jbaafi.github.io/climecol/reference/validate_weather.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a standardized weather table — validate_weather","text":"df Tibble read_weather_csv() least date station. temp_bounds numeric(2). Allowed °C range temps. Default c(-60, 60). rain_max numeric(1). Max plausible daily rain (mm). Default 200. snow_max numeric(1). Max plausible daily snow (cm). Default Inf. check_precip_consistency logical. Check precip vs rain/SWE. Default TRUE. swe_ratio numeric(1). mm water per cm snow (SWE). Default 10.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/validate_weather.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a standardized weather table — validate_weather","text":"list(summary = tibble, flags = tibble)","code":""},{"path":"https://jbaafi.github.io/climecol/reference/weather_nl.html","id":null,"dir":"Reference","previous_headings":"","what":"Newfoundland daily weather example — weather_nl","title":"Newfoundland daily weather example — weather_nl","text":"curated daily weather dataset Newfoundland station, suitable examples vignettes. Columns standardized match package's helper functions (e.g., validate_weather(), complete_daily_calendar()).","code":""},{"path":"https://jbaafi.github.io/climecol/reference/weather_nl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Newfoundland daily weather example — weather_nl","text":"","code":"weather_nl"},{"path":"https://jbaafi.github.io/climecol/reference/weather_nl.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Newfoundland daily weather example — weather_nl","text":"tibble following columns: date Date observation (Date). tmin_c Minimum temperature °C (numeric). tmax_c Maximum temperature °C (numeric). tavg_c Mean temperature °C (numeric). rain_mm Total rainfall millimetres (numeric). precip_mm Total precipitation millimetres (numeric). snow_cm Total snowfall centimetres (numeric). Year Calendar year (integer). Month Calendar month (1–12, integer). Day Calendar day month (1–31, integer). Station.Name Station name provided source (character). Climate.ID Environment Canada climate station ID (character). station Canonical station key used climecol functions (character). Typically set equal Station.Name Climate.ID.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/weather_nl.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Newfoundland daily weather example — weather_nl","text":"Environment Climate Change Canada (ECCC) daily climate data.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/weather_nl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Newfoundland daily weather example — weather_nl","text":"dataset follows standardized column names expected package utilities. particular, downstream helpers assume date (lowercase) station exist.","code":""},{"path":"https://jbaafi.github.io/climecol/reference/weather_nl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Newfoundland daily weather example — weather_nl","text":"","code":"data(weather_nl) # Quick QA summary qa <- validate_weather(weather_nl) qa$summary #> # A tibble: 1 × 11 #>   n_rows stations span_start span_end   n_missing_dates n_negative_values #>    <int>    <int> <date>     <date>               <int>             <int> #> 1   5844        2 2008-01-01 2023-12-31               0                 0 #> # ℹ 5 more variables: n_tmax_lt_tmin <int>, n_temp_oob <int>, #> #   n_rain_gt_max <int>, n_snow_gt_max <int>, n_precip_inconsistent <int>  # Make gaps explicit and summarise coverage cal <- complete_daily_calendar(weather_nl) summarise_gaps(cal, by = \"station\") #> # A tibble: 2 × 6 #>   station           n_days n_missing coverage n_gaps longest_gap #>   <chr>              <int>     <int>    <dbl>  <int>       <int> #> 1 ST JOHN'S A         1827         0        1      0           0 #> 2 ST. JOHN'S INTL A   4017         0        1      0           0"},{"path":[]},{"path":"https://jbaafi.github.io/climecol/news/index.html","id":"new-0-1-7","dir":"Changelog","previous_headings":"","what":"New","title":"climecol 0.1.7","text":"Supports built-user-specified models. Optionally maps results actual calendar dates. Returns tidy long wide format direct plotting model input.","code":""},{"path":"https://jbaafi.github.io/climecol/news/index.html","id":"improvements-0-1-7","dir":"Changelog","previous_headings":"New","what":"Improvements","title":"climecol 0.1.7","text":"Updated vignette README examples demonstrating temperature-scenario simulation. Added unit tests scenario generation date mapping.","code":""},{"path":"https://jbaafi.github.io/climecol/news/index.html","id":"version-0-1-7","dir":"Changelog","previous_headings":"New","what":"Version","title":"climecol 0.1.7","text":"Incremented version 0.1.7 rebuilt pkgdown site.","code":""},{"path":[]},{"path":"https://jbaafi.github.io/climecol/news/index.html","id":"new-features-0-1-6","dir":"Changelog","previous_headings":"","what":"New features","title":"climecol 0.1.6","text":"Added sample_rainfall_by_month(), new stochastic rainfall sampler generates daily rainfall time series preserving monthly seasonality. function resamples observed daily rainfall calendar month across years, maintaining empirical wet/dry distribution without assuming specific statistical model. Works directly built-weather_nl dataset user-supplied data. Automatically detects rainfall columns (rain_mm, precip_mm, etc.) standardizes variable names using normalize_weather_names(). Supports reproducible sampling via seed numeric Date input. Includes optional parameters handling missing data (drop_na, na_as_zero). Added new vignette “Stochastic Daily Rainfall Sampling” demonstrating realistic daily rainfall simulation ecological population models.","code":""},{"path":"https://jbaafi.github.io/climecol/news/index.html","id":"improvements-0-1-6","dir":"Changelog","previous_headings":"","what":"Improvements","title":"climecol 0.1.6","text":"Updated README example section rainfall sampling plotting. Expanded testthat coverage validate reproducibility, month pooling, robustness varying input column names.","code":""},{"path":"https://jbaafi.github.io/climecol/news/index.html","id":"climecol-015-2025-10-06","dir":"Changelog","previous_headings":"","what":"climecol 0.1.5 (2025-10-06)","title":"climecol 0.1.5 (2025-10-06)","text":"Added fit_seasonal_photo() fit visualise periodic photoperiod cycles. Supports built-sinusoidal models (sin1, sin2) custom user-defined formulas. Includes AIC R² reporting, plus optional plots visual diagnostics.","code":""},{"path":[]},{"path":"https://jbaafi.github.io/climecol/news/index.html","id":"new-0-1-4","dir":"Changelog","previous_headings":"","what":"New","title":"climecol 0.1.4 (2025-10-02)","text":"Added fit_seasonal_temp() fit seasonal temperature curves day--year means using sinusoidal models, returning AIC R², optional plot overlay.","code":""},{"path":[]},{"path":"https://jbaafi.github.io/climecol/news/index.html","id":"new-0-1-3","dir":"Changelog","previous_headings":"","what":"New","title":"climecol 0.1.3 (2025-10-01)","text":"Added normalize_weather_names() standardize column names (e.g., Date → date, Rain_mm → rain_mm, Station.Name → station) smoother downstream workflows. Added zzz.R utils::globalVariables() declarations silence notes NSE variables (n_days, n_missing, etc.).","code":""},{"path":"https://jbaafi.github.io/climecol/news/index.html","id":"improvements-0-1-3","dir":"Changelog","previous_headings":"","what":"Improvements","title":"climecol 0.1.3 (2025-10-01)","text":"Updated weather_nl dataset include Station.Name, Climate.ID, canonical station key. Harmonized internal helpers vignettes use lower-case column conventions (date, rain_mm). summarise_rainfall_monthly() plot_rainfall() now robust modernized column names.","code":""},{"path":"https://jbaafi.github.io/climecol/news/index.html","id":"fixes-0-1-3","dir":"Changelog","previous_headings":"","what":"Fixes","title":"climecol 0.1.3 (2025-10-01)","text":"Fixed vignette build errors caused outdated column references (Date, Rain_mm). Fixed examples tests run consistently updated dataset helpers.","code":""},{"path":"https://jbaafi.github.io/climecol/news/index.html","id":"climecol-012","dir":"Changelog","previous_headings":"","what":"climecol 0.1.2","title":"climecol 0.1.2","text":"complete_daily_calendar(): ensures complete daily date sequence per station, inserting missing rows flagged is_missing_row. summarise_gaps(): quantifies coverage, missingness, longest gaps per station month. impute_weather(): provides simple gap fillers (\"locf\", \"linear\", \"spline\") safeguards short gaps. Extended vignette new Gaps + Imputation section illustrating use. Improved documentation explicit notes caveats imputation assumptions.","code":""},{"path":"https://jbaafi.github.io/climecol/news/index.html","id":"climecol-011","dir":"Changelog","previous_headings":"","what":"climecol 0.1.1","title":"climecol 0.1.1","text":"read_weather_csv(): source-agnostic CSV importer default EC mapping. default_weather_mapping(): starter mapping Environment Canada daily exports. validate_weather(): configurable QA checks (temp bounds, rain max, optional snow max), optional precipitation-consistency flags (rain vs SWE), calendar completeness. Added unit tests functions, pkgdown reference section, vignette.","code":""},{"path":"https://jbaafi.github.io/climecol/news/index.html","id":"climecol-010","dir":"Changelog","previous_headings":"","what":"climecol 0.1.0","title":"climecol 0.1.0","text":"Initial setup pkgdown site. Photoperiod helpers added: daylength_f95(), photoperiod_year(). Example data weather_nl; plotting helper plot_rainfall().","code":""},{"path":"https://jbaafi.github.io/climecol/news/index.html","id":"climecol-0009000","dir":"Changelog","previous_headings":"","what":"climecol 0.0.0.9000","title":"climecol 0.0.0.9000","text":"First development snapshot.","code":""}]
